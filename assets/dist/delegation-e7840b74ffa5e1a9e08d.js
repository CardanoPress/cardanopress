/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js ***!
  \***************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/.pnpm/regenerator-runtime@0.13.9/node_modules/regenerator-runtime/runtime.js\");\n\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js ***!
  \*******************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"encode_arbitrary_bytes_as_metadatum\": function() { return /* binding */ encode_arbitrary_bytes_as_metadatum; },\n/* harmony export */   \"decode_arbitrary_bytes_from_metadatum\": function() { return /* binding */ decode_arbitrary_bytes_from_metadatum; },\n/* harmony export */   \"encode_json_str_to_metadatum\": function() { return /* binding */ encode_json_str_to_metadatum; },\n/* harmony export */   \"decode_metadatum_to_json_str\": function() { return /* binding */ decode_metadatum_to_json_str; },\n/* harmony export */   \"encrypt_with_password\": function() { return /* binding */ encrypt_with_password; },\n/* harmony export */   \"decrypt_with_password\": function() { return /* binding */ decrypt_with_password; },\n/* harmony export */   \"min_fee\": function() { return /* binding */ min_fee; },\n/* harmony export */   \"make_daedalus_bootstrap_witness\": function() { return /* binding */ make_daedalus_bootstrap_witness; },\n/* harmony export */   \"make_icarus_bootstrap_witness\": function() { return /* binding */ make_icarus_bootstrap_witness; },\n/* harmony export */   \"make_vkey_witness\": function() { return /* binding */ make_vkey_witness; },\n/* harmony export */   \"hash_auxiliary_data\": function() { return /* binding */ hash_auxiliary_data; },\n/* harmony export */   \"hash_transaction\": function() { return /* binding */ hash_transaction; },\n/* harmony export */   \"hash_plutus_data\": function() { return /* binding */ hash_plutus_data; },\n/* harmony export */   \"hash_script_data\": function() { return /* binding */ hash_script_data; },\n/* harmony export */   \"get_implicit_input\": function() { return /* binding */ get_implicit_input; },\n/* harmony export */   \"get_deposit\": function() { return /* binding */ get_deposit; },\n/* harmony export */   \"min_ada_required\": function() { return /* binding */ min_ada_required; },\n/* harmony export */   \"CertificateKind\": function() { return /* binding */ CertificateKind; },\n/* harmony export */   \"MIRPot\": function() { return /* binding */ MIRPot; },\n/* harmony export */   \"MIRKind\": function() { return /* binding */ MIRKind; },\n/* harmony export */   \"RelayKind\": function() { return /* binding */ RelayKind; },\n/* harmony export */   \"NativeScriptKind\": function() { return /* binding */ NativeScriptKind; },\n/* harmony export */   \"ScriptHashNamespace\": function() { return /* binding */ ScriptHashNamespace; },\n/* harmony export */   \"NetworkIdKind\": function() { return /* binding */ NetworkIdKind; },\n/* harmony export */   \"TransactionMetadatumKind\": function() { return /* binding */ TransactionMetadatumKind; },\n/* harmony export */   \"MetadataJsonSchema\": function() { return /* binding */ MetadataJsonSchema; },\n/* harmony export */   \"LanguageKind\": function() { return /* binding */ LanguageKind; },\n/* harmony export */   \"PlutusDataKind\": function() { return /* binding */ PlutusDataKind; },\n/* harmony export */   \"RedeemerTagKind\": function() { return /* binding */ RedeemerTagKind; },\n/* harmony export */   \"Address\": function() { return /* binding */ Address; },\n/* harmony export */   \"AssetName\": function() { return /* binding */ AssetName; },\n/* harmony export */   \"AssetNames\": function() { return /* binding */ AssetNames; },\n/* harmony export */   \"Assets\": function() { return /* binding */ Assets; },\n/* harmony export */   \"AuxiliaryData\": function() { return /* binding */ AuxiliaryData; },\n/* harmony export */   \"AuxiliaryDataHash\": function() { return /* binding */ AuxiliaryDataHash; },\n/* harmony export */   \"AuxiliaryDataSet\": function() { return /* binding */ AuxiliaryDataSet; },\n/* harmony export */   \"BaseAddress\": function() { return /* binding */ BaseAddress; },\n/* harmony export */   \"BigInt\": function() { return /* binding */ BigInt; },\n/* harmony export */   \"BigNum\": function() { return /* binding */ BigNum; },\n/* harmony export */   \"Bip32PrivateKey\": function() { return /* binding */ Bip32PrivateKey; },\n/* harmony export */   \"Bip32PublicKey\": function() { return /* binding */ Bip32PublicKey; },\n/* harmony export */   \"Block\": function() { return /* binding */ Block; },\n/* harmony export */   \"BlockHash\": function() { return /* binding */ BlockHash; },\n/* harmony export */   \"BootstrapWitness\": function() { return /* binding */ BootstrapWitness; },\n/* harmony export */   \"BootstrapWitnesses\": function() { return /* binding */ BootstrapWitnesses; },\n/* harmony export */   \"ByronAddress\": function() { return /* binding */ ByronAddress; },\n/* harmony export */   \"Certificate\": function() { return /* binding */ Certificate; },\n/* harmony export */   \"Certificates\": function() { return /* binding */ Certificates; },\n/* harmony export */   \"ConstrPlutusData\": function() { return /* binding */ ConstrPlutusData; },\n/* harmony export */   \"CostModel\": function() { return /* binding */ CostModel; },\n/* harmony export */   \"Costmdls\": function() { return /* binding */ Costmdls; },\n/* harmony export */   \"DNSRecordAorAAAA\": function() { return /* binding */ DNSRecordAorAAAA; },\n/* harmony export */   \"DNSRecordSRV\": function() { return /* binding */ DNSRecordSRV; },\n/* harmony export */   \"DataHash\": function() { return /* binding */ DataHash; },\n/* harmony export */   \"Ed25519KeyHash\": function() { return /* binding */ Ed25519KeyHash; },\n/* harmony export */   \"Ed25519KeyHashes\": function() { return /* binding */ Ed25519KeyHashes; },\n/* harmony export */   \"Ed25519Signature\": function() { return /* binding */ Ed25519Signature; },\n/* harmony export */   \"EnterpriseAddress\": function() { return /* binding */ EnterpriseAddress; },\n/* harmony export */   \"ExUnitPrices\": function() { return /* binding */ ExUnitPrices; },\n/* harmony export */   \"ExUnits\": function() { return /* binding */ ExUnits; },\n/* harmony export */   \"GeneralTransactionMetadata\": function() { return /* binding */ GeneralTransactionMetadata; },\n/* harmony export */   \"GenesisDelegateHash\": function() { return /* binding */ GenesisDelegateHash; },\n/* harmony export */   \"GenesisHash\": function() { return /* binding */ GenesisHash; },\n/* harmony export */   \"GenesisHashes\": function() { return /* binding */ GenesisHashes; },\n/* harmony export */   \"GenesisKeyDelegation\": function() { return /* binding */ GenesisKeyDelegation; },\n/* harmony export */   \"Header\": function() { return /* binding */ Header; },\n/* harmony export */   \"HeaderBody\": function() { return /* binding */ HeaderBody; },\n/* harmony export */   \"Int\": function() { return /* binding */ Int; },\n/* harmony export */   \"Ipv4\": function() { return /* binding */ Ipv4; },\n/* harmony export */   \"Ipv6\": function() { return /* binding */ Ipv6; },\n/* harmony export */   \"KESSignature\": function() { return /* binding */ KESSignature; },\n/* harmony export */   \"KESVKey\": function() { return /* binding */ KESVKey; },\n/* harmony export */   \"Language\": function() { return /* binding */ Language; },\n/* harmony export */   \"Languages\": function() { return /* binding */ Languages; },\n/* harmony export */   \"LegacyDaedalusPrivateKey\": function() { return /* binding */ LegacyDaedalusPrivateKey; },\n/* harmony export */   \"LinearFee\": function() { return /* binding */ LinearFee; },\n/* harmony export */   \"MIRToStakeCredentials\": function() { return /* binding */ MIRToStakeCredentials; },\n/* harmony export */   \"MetadataList\": function() { return /* binding */ MetadataList; },\n/* harmony export */   \"MetadataMap\": function() { return /* binding */ MetadataMap; },\n/* harmony export */   \"Mint\": function() { return /* binding */ Mint; },\n/* harmony export */   \"MintAssets\": function() { return /* binding */ MintAssets; },\n/* harmony export */   \"MoveInstantaneousReward\": function() { return /* binding */ MoveInstantaneousReward; },\n/* harmony export */   \"MoveInstantaneousRewardsCert\": function() { return /* binding */ MoveInstantaneousRewardsCert; },\n/* harmony export */   \"MultiAsset\": function() { return /* binding */ MultiAsset; },\n/* harmony export */   \"MultiHostName\": function() { return /* binding */ MultiHostName; },\n/* harmony export */   \"NativeScript\": function() { return /* binding */ NativeScript; },\n/* harmony export */   \"NativeScripts\": function() { return /* binding */ NativeScripts; },\n/* harmony export */   \"NetworkId\": function() { return /* binding */ NetworkId; },\n/* harmony export */   \"NetworkInfo\": function() { return /* binding */ NetworkInfo; },\n/* harmony export */   \"Nonce\": function() { return /* binding */ Nonce; },\n/* harmony export */   \"OperationalCert\": function() { return /* binding */ OperationalCert; },\n/* harmony export */   \"PlutusData\": function() { return /* binding */ PlutusData; },\n/* harmony export */   \"PlutusList\": function() { return /* binding */ PlutusList; },\n/* harmony export */   \"PlutusMap\": function() { return /* binding */ PlutusMap; },\n/* harmony export */   \"PlutusScript\": function() { return /* binding */ PlutusScript; },\n/* harmony export */   \"PlutusScripts\": function() { return /* binding */ PlutusScripts; },\n/* harmony export */   \"Pointer\": function() { return /* binding */ Pointer; },\n/* harmony export */   \"PointerAddress\": function() { return /* binding */ PointerAddress; },\n/* harmony export */   \"PoolMetadata\": function() { return /* binding */ PoolMetadata; },\n/* harmony export */   \"PoolMetadataHash\": function() { return /* binding */ PoolMetadataHash; },\n/* harmony export */   \"PoolParams\": function() { return /* binding */ PoolParams; },\n/* harmony export */   \"PoolRegistration\": function() { return /* binding */ PoolRegistration; },\n/* harmony export */   \"PoolRetirement\": function() { return /* binding */ PoolRetirement; },\n/* harmony export */   \"PrivateKey\": function() { return /* binding */ PrivateKey; },\n/* harmony export */   \"ProposedProtocolParameterUpdates\": function() { return /* binding */ ProposedProtocolParameterUpdates; },\n/* harmony export */   \"ProtocolParamUpdate\": function() { return /* binding */ ProtocolParamUpdate; },\n/* harmony export */   \"ProtocolVersion\": function() { return /* binding */ ProtocolVersion; },\n/* harmony export */   \"ProtocolVersions\": function() { return /* binding */ ProtocolVersions; },\n/* harmony export */   \"PublicKey\": function() { return /* binding */ PublicKey; },\n/* harmony export */   \"PublicKeys\": function() { return /* binding */ PublicKeys; },\n/* harmony export */   \"Redeemer\": function() { return /* binding */ Redeemer; },\n/* harmony export */   \"RedeemerTag\": function() { return /* binding */ RedeemerTag; },\n/* harmony export */   \"Redeemers\": function() { return /* binding */ Redeemers; },\n/* harmony export */   \"Relay\": function() { return /* binding */ Relay; },\n/* harmony export */   \"Relays\": function() { return /* binding */ Relays; },\n/* harmony export */   \"RewardAddress\": function() { return /* binding */ RewardAddress; },\n/* harmony export */   \"RewardAddresses\": function() { return /* binding */ RewardAddresses; },\n/* harmony export */   \"ScriptAll\": function() { return /* binding */ ScriptAll; },\n/* harmony export */   \"ScriptAny\": function() { return /* binding */ ScriptAny; },\n/* harmony export */   \"ScriptDataHash\": function() { return /* binding */ ScriptDataHash; },\n/* harmony export */   \"ScriptHash\": function() { return /* binding */ ScriptHash; },\n/* harmony export */   \"ScriptHashes\": function() { return /* binding */ ScriptHashes; },\n/* harmony export */   \"ScriptNOfK\": function() { return /* binding */ ScriptNOfK; },\n/* harmony export */   \"ScriptPubkey\": function() { return /* binding */ ScriptPubkey; },\n/* harmony export */   \"SingleHostAddr\": function() { return /* binding */ SingleHostAddr; },\n/* harmony export */   \"SingleHostName\": function() { return /* binding */ SingleHostName; },\n/* harmony export */   \"StakeCredential\": function() { return /* binding */ StakeCredential; },\n/* harmony export */   \"StakeCredentials\": function() { return /* binding */ StakeCredentials; },\n/* harmony export */   \"StakeDelegation\": function() { return /* binding */ StakeDelegation; },\n/* harmony export */   \"StakeDeregistration\": function() { return /* binding */ StakeDeregistration; },\n/* harmony export */   \"StakeRegistration\": function() { return /* binding */ StakeRegistration; },\n/* harmony export */   \"Strings\": function() { return /* binding */ Strings; },\n/* harmony export */   \"TimelockExpiry\": function() { return /* binding */ TimelockExpiry; },\n/* harmony export */   \"TimelockStart\": function() { return /* binding */ TimelockStart; },\n/* harmony export */   \"Transaction\": function() { return /* binding */ Transaction; },\n/* harmony export */   \"TransactionBodies\": function() { return /* binding */ TransactionBodies; },\n/* harmony export */   \"TransactionBody\": function() { return /* binding */ TransactionBody; },\n/* harmony export */   \"TransactionBuilder\": function() { return /* binding */ TransactionBuilder; },\n/* harmony export */   \"TransactionHash\": function() { return /* binding */ TransactionHash; },\n/* harmony export */   \"TransactionInput\": function() { return /* binding */ TransactionInput; },\n/* harmony export */   \"TransactionInputs\": function() { return /* binding */ TransactionInputs; },\n/* harmony export */   \"TransactionMetadatum\": function() { return /* binding */ TransactionMetadatum; },\n/* harmony export */   \"TransactionMetadatumLabels\": function() { return /* binding */ TransactionMetadatumLabels; },\n/* harmony export */   \"TransactionOutput\": function() { return /* binding */ TransactionOutput; },\n/* harmony export */   \"TransactionOutputs\": function() { return /* binding */ TransactionOutputs; },\n/* harmony export */   \"TransactionUnspentOutput\": function() { return /* binding */ TransactionUnspentOutput; },\n/* harmony export */   \"TransactionWitnessSet\": function() { return /* binding */ TransactionWitnessSet; },\n/* harmony export */   \"TransactionWitnessSets\": function() { return /* binding */ TransactionWitnessSets; },\n/* harmony export */   \"URL\": function() { return /* binding */ URL; },\n/* harmony export */   \"UnitInterval\": function() { return /* binding */ UnitInterval; },\n/* harmony export */   \"Update\": function() { return /* binding */ Update; },\n/* harmony export */   \"VRFCert\": function() { return /* binding */ VRFCert; },\n/* harmony export */   \"VRFKeyHash\": function() { return /* binding */ VRFKeyHash; },\n/* harmony export */   \"VRFVKey\": function() { return /* binding */ VRFVKey; },\n/* harmony export */   \"Value\": function() { return /* binding */ Value; },\n/* harmony export */   \"Vkey\": function() { return /* binding */ Vkey; },\n/* harmony export */   \"Vkeys\": function() { return /* binding */ Vkeys; },\n/* harmony export */   \"Vkeywitness\": function() { return /* binding */ Vkeywitness; },\n/* harmony export */   \"Vkeywitnesses\": function() { return /* binding */ Vkeywitnesses; },\n/* harmony export */   \"Withdrawals\": function() { return /* binding */ Withdrawals; },\n/* harmony export */   \"__wbindgen_object_drop_ref\": function() { return /* binding */ __wbindgen_object_drop_ref; },\n/* harmony export */   \"__wbindgen_string_new\": function() { return /* binding */ __wbindgen_string_new; },\n/* harmony export */   \"__wbg_new_3a746f2619705add\": function() { return /* binding */ __wbg_new_3a746f2619705add; },\n/* harmony export */   \"__wbg_call_f54d3a6dadb199ca\": function() { return /* binding */ __wbg_call_f54d3a6dadb199ca; },\n/* harmony export */   \"__wbindgen_jsval_eq\": function() { return /* binding */ __wbindgen_jsval_eq; },\n/* harmony export */   \"__wbg_self_ac379e780a0d8b94\": function() { return /* binding */ __wbg_self_ac379e780a0d8b94; },\n/* harmony export */   \"__wbg_crypto_1e4302b85d4f64a2\": function() { return /* binding */ __wbg_crypto_1e4302b85d4f64a2; },\n/* harmony export */   \"__wbindgen_is_undefined\": function() { return /* binding */ __wbindgen_is_undefined; },\n/* harmony export */   \"__wbg_getRandomValues_1b4ba144162a5c9e\": function() { return /* binding */ __wbg_getRandomValues_1b4ba144162a5c9e; },\n/* harmony export */   \"__wbg_require_6461b1e9a0d7c34a\": function() { return /* binding */ __wbg_require_6461b1e9a0d7c34a; },\n/* harmony export */   \"__wbg_randomFillSync_1b52c8482374c55b\": function() { return /* binding */ __wbg_randomFillSync_1b52c8482374c55b; },\n/* harmony export */   \"__wbg_getRandomValues_1ef11e888e5228e9\": function() { return /* binding */ __wbg_getRandomValues_1ef11e888e5228e9; },\n/* harmony export */   \"__wbindgen_string_get\": function() { return /* binding */ __wbindgen_string_get; },\n/* harmony export */   \"__wbindgen_debug_string\": function() { return /* binding */ __wbindgen_debug_string; },\n/* harmony export */   \"__wbindgen_throw\": function() { return /* binding */ __wbindgen_throw; },\n/* harmony export */   \"__wbindgen_rethrow\": function() { return /* binding */ __wbindgen_rethrow; }\n/* harmony export */ });\n/* harmony import */ var _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cardano_serialization_lib_bg.wasm */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\nfunction encode_arbitrary_bytes_as_metadatum(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\nfunction decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\nfunction encode_json_str_to_metadatum(json, schema) {\n    var ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_json_str_to_metadatum(ptr0, len0, schema);\n    return TransactionMetadatum.__wrap(ret);\n}\n\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\nfunction decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\nfunction encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(salt, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(nonce, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\nfunction decrypt_with_password(password, data) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\nfunction min_fee(tx, linear_fee) {\n    _assertClass(tx, Transaction);\n    _assertClass(linear_fee, LinearFee);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_fee(tx.ptr, linear_fee.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\nfunction make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\nfunction make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\nfunction make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n\n/**\n* @param {AuxiliaryData} auxiliary_data\n* @returns {AuxiliaryDataHash}\n*/\nfunction hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\nfunction hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n\n/**\n* @param {PlutusData} plutus_data\n* @returns {DataHash}\n*/\nfunction hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n\n/**\n* @param {Redeemers} redeemers\n* @param {Costmdls} cost_models\n* @param {PlutusList | undefined} datums\n* @returns {ScriptDataHash}\n*/\nfunction hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.ptr;\n        datums.ptr = 0;\n    }\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\nfunction get_implicit_input(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return Value.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\nfunction get_deposit(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n* @param {Value} assets\n* @param {BigNum} minimum_utxo_val\n* @returns {BigNum}\n*/\nfunction min_ada_required(assets, minimum_utxo_val) {\n    _assertClass(assets, Value);\n    _assertClass(minimum_utxo_val, BigNum);\n    var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_ada_required(assets.ptr, minimum_utxo_val.ptr);\n    return BigNum.__wrap(ret);\n}\n\n/**\n*/\nconst CertificateKind = Object.freeze({ StakeRegistration:0,\"0\":\"StakeRegistration\",StakeDeregistration:1,\"1\":\"StakeDeregistration\",StakeDelegation:2,\"2\":\"StakeDelegation\",PoolRegistration:3,\"3\":\"PoolRegistration\",PoolRetirement:4,\"4\":\"PoolRetirement\",GenesisKeyDelegation:5,\"5\":\"GenesisKeyDelegation\",MoveInstantaneousRewardsCert:6,\"6\":\"MoveInstantaneousRewardsCert\", });\n/**\n*/\nconst MIRPot = Object.freeze({ Reserves:0,\"0\":\"Reserves\",Treasury:1,\"1\":\"Treasury\", });\n/**\n*/\nconst MIRKind = Object.freeze({ ToOtherPot:0,\"0\":\"ToOtherPot\",ToStakeCredentials:1,\"1\":\"ToStakeCredentials\", });\n/**\n*/\nconst RelayKind = Object.freeze({ SingleHostAddr:0,\"0\":\"SingleHostAddr\",SingleHostName:1,\"1\":\"SingleHostName\",MultiHostName:2,\"2\":\"MultiHostName\", });\n/**\n*/\nconst NativeScriptKind = Object.freeze({ ScriptPubkey:0,\"0\":\"ScriptPubkey\",ScriptAll:1,\"1\":\"ScriptAll\",ScriptAny:2,\"2\":\"ScriptAny\",ScriptNOfK:3,\"3\":\"ScriptNOfK\",TimelockStart:4,\"4\":\"TimelockStart\",TimelockExpiry:5,\"5\":\"TimelockExpiry\", });\n/**\n* Each new language uses a different namespace for hashing its script\n* This is because you could have a language where the same bytes have different semantics\n* So this avoids scripts in different languages mapping to the same hash\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\n*/\nconst ScriptHashNamespace = Object.freeze({ NativeScript:0,\"0\":\"NativeScript\", });\n/**\n*/\nconst NetworkIdKind = Object.freeze({ Testnet:0,\"0\":\"Testnet\",Mainnet:1,\"1\":\"Mainnet\", });\n/**\n*/\nconst TransactionMetadatumKind = Object.freeze({ MetadataMap:0,\"0\":\"MetadataMap\",MetadataList:1,\"1\":\"MetadataList\",Int:2,\"2\":\"Int\",Bytes:3,\"3\":\"Bytes\",Text:4,\"4\":\"Text\", });\n/**\n*/\nconst MetadataJsonSchema = Object.freeze({ NoConversions:0,\"0\":\"NoConversions\",BasicConversions:1,\"1\":\"BasicConversions\",DetailedSchema:2,\"2\":\"DetailedSchema\", });\n/**\n*/\nconst LanguageKind = Object.freeze({ PlutusV1:0,\"0\":\"PlutusV1\", });\n/**\n*/\nconst PlutusDataKind = Object.freeze({ ConstrPlutusData:0,\"0\":\"ConstrPlutusData\",Map:1,\"1\":\"Map\",List:2,\"2\":\"List\",Integer:3,\"3\":\"Integer\",Bytes:4,\"4\":\"Bytes\", });\n/**\n*/\nconst RedeemerTagKind = Object.freeze({ Spend:0,\"0\":\"Spend\",Mint:1,\"1\":\"Mint\",Cert:2,\"2\":\"Cert\",Reward:3,\"3\":\"Reward\", });\n/**\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Address}\n    */\n    static from_bytes(data) {\n        var ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_bytes(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string | undefined} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Address}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_bech32(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_network_id(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass AssetName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assetname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_from_bytes(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} name\n    * @returns {AssetName}\n    */\n    static new(name) {\n        var ptr0 = passArray8ToWasm0(name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_new(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    name() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass AssetNames {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assetnames_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetNames}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_from_bytes(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {AssetName}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} elem\n    */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Assets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Assets}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_from_bytes(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {Assets}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nclass AuxiliaryData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_from_bytes(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryData}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata | undefined}\n    */\n    metadata() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {GeneralTransactionMetadata} metadata\n    */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\n/**\n*/\nclass AuxiliaryDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_from_bech32(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_from_bytes(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass AuxiliaryDataSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} tx_index\n    * @param {AuxiliaryData} data\n    * @returns {AuxiliaryData | undefined}\n    */\n    insert(tx_index, data) {\n        _assertClass(data, AuxiliaryData);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_insert(this.ptr, tx_index, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {number} tx_index\n    * @returns {AuxiliaryData | undefined}\n    */\n    get(tx_index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_get(this.ptr, tx_index);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    indices() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_indices(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass BaseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_baseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {StakeCredential} stake\n    * @returns {BaseAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_cred() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {BaseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass BigInt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bigint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigInt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_bytes(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_u64() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {BigInt}\n    */\n    static from_str(text) {\n        var ptr0 = passStringToWasm0(text, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_str(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    static zero() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * returns 0 if it would otherwise underflow\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {number}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass Bip32PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n    * derive this private key with the given index.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PrivateKey}\n    */\n    derive(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\n    * the traditional 96-byte xprv is simply encoded as\n    * prv | chaincode\n    * however, because some software may not know how to compute a public key from a private key,\n    * the 128-byte inlines the public key in the following format\n    * prv | pub | chaincode\n    * so be careful if you see the term \"xprv\" as it could refer to either one\n    * our library does not require the pub (instead we compute the pub key when needed)\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_128_xprv(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_128_xprv(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * see from_128_xprv\n    * @returns {Uint8Array}\n    */\n    to_128_xprv() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Bip32PrivateKey}\n    */\n    static generate_ed25519_bip32() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_generate_ed25519_bip32();\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    to_raw_key() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Bip32PublicKey}\n    */\n    to_public() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bytes(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bech32(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} entropy\n    * @param {Uint8Array} password\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bip39_entropy(entropy, password) {\n        var ptr0 = passArray8ToWasm0(entropy, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Bip32PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n    * derive this public key with the given index.\n    *\n    * # Errors\n    *\n    * If the index is not a soft derivation index (< 0x80000000) then\n    * calling this method will fail.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PublicKey}\n    */\n    derive(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_derive(this.ptr, index);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_raw_key() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_from_bytes(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_from_bech32(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Block {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_block_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Block}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_from_bytes(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n    * @returns {Header}\n    */\n    header() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    transaction_bodies() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    transaction_witness_sets() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    auxiliary_data_set() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    invalid_transactions() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_invalid_transactions(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Header} header\n    * @param {TransactionBodies} transaction_bodies\n    * @param {TransactionWitnessSets} transaction_witness_sets\n    * @param {AuxiliaryDataSet} auxiliary_data_set\n    * @param {Uint32Array} invalid_transactions\n    * @returns {Block}\n    */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        var ptr0 = passArray32ToWasm0(invalid_transactions, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);\n        return Block.__wrap(ret);\n    }\n}\n/**\n*/\nclass BlockHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_blockhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {BlockHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_from_bech32(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BlockHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_from_bytes(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass BootstrapWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BootstrapWitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_from_bytes(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chain_code() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @param {Uint8Array} chain_code\n    * @param {Uint8Array} attributes\n    * @returns {BootstrapWitness}\n    */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ptr0 = passArray8ToWasm0(chain_code, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(attributes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/**\n*/\nclass BootstrapWitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BootstrapWitness}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ByronAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_byronaddress_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_base58() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ByronAddress}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_bytes(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n    * note: for bech32 addresses, you need to use network_id instead\n    * @returns {number}\n    */\n    byron_protocol_magic() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {string} s\n    * @returns {ByronAddress}\n    */\n    static from_base58(s) {\n        var ptr0 = passStringToWasm0(s, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_base58(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {Bip32PublicKey} key\n    * @param {number} protocol_magic\n    * @returns {ByronAddress}\n    */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {boolean}\n    */\n    static is_valid(s) {\n        var ptr0 = passStringToWasm0(s, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {ByronAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass Certificate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_certificate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_from_bytes(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeRegistration} stake_registration\n    * @returns {Certificate}\n    */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDeregistration} stake_deregistration\n    * @returns {Certificate}\n    */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDelegation} stake_delegation\n    * @returns {Certificate}\n    */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRegistration} pool_registration\n    * @returns {Certificate}\n    */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRetirement} pool_retirement\n    * @returns {Certificate}\n    */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisKeyDelegation} genesis_key_delegation\n    * @returns {Certificate}\n    */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n    * @returns {Certificate}\n    */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {StakeRegistration | undefined}\n    */\n    as_stake_registration() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDeregistration | undefined}\n    */\n    as_stake_deregistration() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDelegation | undefined}\n    */\n    as_stake_delegation() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRegistration | undefined}\n    */\n    as_pool_registration() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRetirement | undefined}\n    */\n    as_pool_retirement() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisKeyDelegation | undefined}\n    */\n    as_genesis_key_delegation() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousRewardsCert | undefined}\n    */\n    as_move_instantaneous_rewards_cert() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass Certificates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_certificates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_from_bytes(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {Certificates}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Certificate}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {Certificate} elem\n    */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ConstrPlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ConstrPlutusData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_from_bytes(ptr0, len0);\n        return ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n    tag() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_tag(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    data() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Int} tag\n    * @param {PlutusList} data\n    * @returns {ConstrPlutusData}\n    */\n    static new(tag, data) {\n        _assertClass(tag, Int);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(data, PlutusList);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_new(ptr0, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/**\n*/\nclass CostModel {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_costmodel_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CostModel}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_from_bytes(ptr0, len0);\n        return CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {CostModel}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n    * @param {number} operation\n    * @param {Int} cost\n    * @returns {Int}\n    */\n    set(operation, cost) {\n        _assertClass(cost, Int);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_set(this.ptr, operation, cost.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} operation\n    * @returns {Int}\n    */\n    get(operation) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_get(this.ptr, operation);\n        return Int.__wrap(ret);\n    }\n}\n/**\n*/\nclass Costmdls {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_costmdls_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Costmdls}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_from_bytes(ptr0, len0);\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Language} key\n    * @param {CostModel} value\n    * @returns {CostModel | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @param {Language} key\n    * @returns {CostModel | undefined}\n    */\n    get(key) {\n        _assertClass(key, Language);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {Languages}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\n/**\n*/\nclass DNSRecordAorAAAA {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordAorAAAA}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_new(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass DNSRecordSRV {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordSRV}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_from_bytes(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordSRV}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_new(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass DataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_datahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {DataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_from_bech32(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_from_bytes(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass Ed25519KeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_from_bech32(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_from_bytes(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass Ed25519KeyHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_from_bytes(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Ed25519KeyHash}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Ed25519Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Ed25519Signature}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_bech32(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} input\n    * @returns {Ed25519Signature}\n    */\n    static from_hex(input) {\n        var ptr0 = passStringToWasm0(input, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_hex(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519Signature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_bytes(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nclass EnterpriseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {EnterpriseAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {EnterpriseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass ExUnitPrices {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_exunitprices_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnitPrices}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_from_bytes(ptr0, len0);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    mem_price() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    step_price() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} mem_price\n    * @param {UnitInterval} step_price\n    * @returns {ExUnitPrices}\n    */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/**\n*/\nclass ExUnits {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_exunits_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnits}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_from_bytes(ptr0, len0);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    mem() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_mem(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    steps() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} mem\n    * @param {BigNum} steps\n    * @returns {ExUnits}\n    */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/**\n*/\nclass GeneralTransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_from_bytes(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key\n    * @returns {TransactionMetadatum | undefined}\n    */\n    get(key) {\n        _assertClass(key, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/**\n*/\nclass GenesisDelegateHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_from_bech32(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_from_bytes(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass GenesisHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesishash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_from_bech32(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_from_bytes(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass GenesisHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesishashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_from_bytes(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {GenesisHash}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass GenesisKeyDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_from_bytes(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHash}\n    */\n    genesishash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisDelegateHash}\n    */\n    genesis_delegate_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} genesishash\n    * @param {GenesisDelegateHash} genesis_delegate_hash\n    * @param {VRFKeyHash} vrf_keyhash\n    * @returns {GenesisKeyDelegation}\n    */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nclass Header {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_header_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Header}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_from_bytes(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderBody}\n    */\n    header_body() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {KESSignature}\n    */\n    body_signature() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n    * @param {HeaderBody} header_body\n    * @param {KESSignature} body_signature\n    * @returns {Header}\n    */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/**\n*/\nclass HeaderBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_headerbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_from_bytes(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_number() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash | undefined}\n    */\n    prev_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    issuer_vkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFVKey}\n    */\n    vrf_vkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    nonce_vrf() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    leader_vrf() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_body_size() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash}\n    */\n    block_body_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {OperationalCert}\n    */\n    operational_cert() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersion}\n    */\n    protocol_version() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {number} block_number\n    * @param {number} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} nonce_vrf\n    * @param {VRFCert} leader_vrf\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/**\n*/\nclass Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Ipv4 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ipv4_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv4}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_from_bytes(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv4}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_new(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Ipv6 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ipv6_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv6}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_from_bytes(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv6}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_new(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KESSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_kessignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kessignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kessignature_from_bytes(ptr0, len0);\n        return KESSignature.__wrap(ret);\n    }\n}\n/**\n*/\nclass KESVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_kesvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {KESVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_from_bech32(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_from_bytes(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass Language {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_language_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Language}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_from_bytes(ptr0, len0);\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n    static new_plutus_v1() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Languages {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_languages_free(ptr);\n    }\n    /**\n    * @returns {Languages}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Language}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n    * @param {Language} elem\n    */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.ptr;\n        elem.ptr = 0;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_add(this.ptr, ptr0);\n    }\n}\n/**\n*/\nclass LegacyDaedalusPrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {LegacyDaedalusPrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n        return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass LinearFee {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_linearfee_free(ptr);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    constant() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coefficient() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coefficient\n    * @param {BigNum} constant\n    * @returns {LinearFee}\n    */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/**\n*/\nclass MIRToStakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MIRToStakeCredentials}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_from_bytes(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @param {Int} delta\n    * @returns {Int | undefined}\n    */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @returns {Int | undefined}\n    */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nclass MetadataList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_metadatalist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataList}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_from_bytes(ptr0, len0);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionMetadatum}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass MetadataMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_metadatamap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_from_bytes(ptr0, len0);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_str(key, value) {\n        var ptr0 = passStringToWasm0(key, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(value, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {TransactionMetadatum}\n    */\n    get(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get(this.ptr, key.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @returns {TransactionMetadatum}\n    */\n    get_str(key) {\n        var ptr0 = passStringToWasm0(key, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get_str(this.ptr, ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadatum}\n    */\n    get_i32(key) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get_i32(this.ptr, key);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {boolean}\n    */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/**\n*/\nclass Mint {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Mint}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_from_bytes(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {Mint}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {MintAssets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {MintAssets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n}\n/**\n*/\nclass MintAssets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mintassets_free(ptr);\n    }\n    /**\n    * @returns {MintAssets}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {Int | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {Int | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nclass MoveInstantaneousReward {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_from_bytes(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {BigNum} amount\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {MIRToStakeCredentials} amounts\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    pot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_to_other_pot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials | undefined}\n    */\n    as_to_stake_creds() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nclass MoveInstantaneousRewardsCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousReward}\n    */\n    move_instantaneous_reward() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass MultiAsset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_multiasset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiAsset}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_from_bytes(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {MultiAsset}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {Assets} value\n    * @returns {Assets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, Assets);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {Assets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * removes an asset from the list if the result is 0 or less\n    * @param {MultiAsset} rhs_ma\n    * @returns {MultiAsset}\n    */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/**\n*/\nclass MultiHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_multihostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_from_bytes(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n    * @returns {DNSRecordSRV}\n    */\n    dns_name() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {DNSRecordSRV} dns_name\n    * @returns {MultiHostName}\n    */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass NativeScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nativescript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NativeScript}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_from_bytes(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {number} namespace\n    * @returns {Ed25519KeyHash}\n    */\n    hash(namespace) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_hash(this.ptr, namespace);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptPubkey} script_pubkey\n    * @returns {NativeScript}\n    */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAll} script_all\n    * @returns {NativeScript}\n    */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAny} script_any\n    * @returns {NativeScript}\n    */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptNOfK} script_n_of_k\n    * @returns {NativeScript}\n    */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockStart} timelock_start\n    * @returns {NativeScript}\n    */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockExpiry} timelock_expiry\n    * @returns {NativeScript}\n    */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ScriptPubkey | undefined}\n    */\n    as_script_pubkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAll | undefined}\n    */\n    as_script_all() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAny | undefined}\n    */\n    as_script_any() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptNOfK | undefined}\n    */\n    as_script_n_of_k() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockStart | undefined}\n    */\n    as_timelock_start() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockExpiry | undefined}\n    */\n    as_timelock_expiry() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n}\n/**\n*/\nclass NativeScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nativescripts_free(ptr);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {NativeScript}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass NetworkId {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_networkid_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NetworkId}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_from_bytes(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static testnet() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static mainnet() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass NetworkInfo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_networkinfo_free(ptr);\n    }\n    /**\n    * @param {number} network_id\n    * @param {number} protocol_magic\n    * @returns {NetworkInfo}\n    */\n    static new(network_id, protocol_magic) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    protocol_magic() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static testnet() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static mainnet() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/**\n*/\nclass Nonce {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nonce_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Nonce}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_from_bytes(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Nonce}\n    */\n    static new_identity() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} hash\n    * @returns {Nonce}\n    */\n    static new_from_hash(hash) {\n        var ptr0 = passArray8ToWasm0(hash, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_new_from_hash(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    get_hash() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass OperationalCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_operationalcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {OperationalCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_from_bytes(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {KESVKey}\n    */\n    hot_vkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    sequence_number() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kes_period() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    sigma() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {KESVKey} hot_vkey\n    * @param {number} sequence_number\n    * @param {number} kes_period\n    * @param {Ed25519Signature} sigma\n    * @returns {OperationalCert}\n    */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_from_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {ConstrPlutusData} constr_plutus_data\n    * @returns {PlutusData}\n    */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusMap} map\n    * @returns {PlutusData}\n    */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} list\n    * @returns {PlutusData}\n    */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} integer\n    * @returns {PlutusData}\n    */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ConstrPlutusData | undefined}\n    */\n    as_constr_plutus_data() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap | undefined}\n    */\n    as_map() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    as_list() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt | undefined}\n    */\n    as_integer() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass PlutusList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutuslist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusList}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_from_bytes(ptr0, len0);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusData}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass PlutusMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusmap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_from_bytes(ptr0, len0);\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {PlutusData} key\n    * @param {PlutusData} value\n    * @returns {PlutusData | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} key\n    * @returns {PlutusData | undefined}\n    */\n    get(key) {\n        _assertClass(key, PlutusData);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusscript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_bytes(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static new(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass PlutusScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScripts}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_from_bytes(ptr0, len0);\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScripts}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusScript}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Pointer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_pointer_free(ptr);\n    }\n    /**\n    * @param {number} slot\n    * @param {number} tx_index\n    * @param {number} cert_index\n    * @returns {Pointer}\n    */\n    static new(slot, tx_index, cert_index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_new(slot, tx_index, cert_index);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    tx_index() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_tx_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cert_index() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_cert_index(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass PointerAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {Pointer} stake\n    * @returns {PointerAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Pointer}\n    */\n    stake_pointer() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {PointerAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_from_bytes(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {URL}\n    */\n    url() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_url(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadataHash}\n    */\n    pool_metadata_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {URL} url\n    * @param {PoolMetadataHash} pool_metadata_hash\n    * @returns {PoolMetadata}\n    */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolMetadataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {PoolMetadataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_from_bech32(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_from_bytes(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolparams_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolParams}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_from_bytes(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    operator() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    pledge() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pledge(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    cost() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    margin() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress}\n    */\n    reward_account() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    pool_owners() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    relays() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadata | undefined}\n    */\n    pool_metadata() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} operator\n    * @param {VRFKeyHash} vrf_keyhash\n    * @param {BigNum} pledge\n    * @param {BigNum} cost\n    * @param {UnitInterval} margin\n    * @param {RewardAddress} reward_account\n    * @param {Ed25519KeyHashes} pool_owners\n    * @param {Relays} relays\n    * @param {PoolMetadata | undefined} pool_metadata\n    * @returns {PoolParams}\n    */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_from_bytes(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolParams}\n    */\n    pool_params() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @param {PoolParams} pool_params\n    * @returns {PoolRegistration}\n    */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolRetirement {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolretirement_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRetirement}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_from_bytes(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @param {number} epoch\n    * @returns {PoolRetirement}\n    */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/**\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_public() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_generate_ed25519();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519extended() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_generate_ed25519extended();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_extended_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_extended_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_normal_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_normal_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} message\n    * @returns {Ed25519Signature}\n    */\n    sign(message) {\n        var ptr0 = passArray8ToWasm0(message, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProposedProtocolParameterUpdates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {GenesisHash} key\n    * @param {ProtocolParamUpdate} value\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} key\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProtocolParamUpdate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_from_bytes(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_a\n    */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_a() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_b\n    */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_b() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_block_body_size\n    */\n    set_max_block_body_size(max_block_body_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_body_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_tx_size\n    */\n    set_max_tx_size(max_tx_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_tx_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_block_header_size\n    */\n    set_max_block_header_size(max_block_header_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_header_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} key_deposit\n    */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    key_deposit() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    pool_deposit() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_epoch\n    */\n    set_max_epoch(max_epoch) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_epoch() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} n_opt\n    */\n    set_n_opt(n_opt) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    n_opt() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {UnitInterval} pool_pledge_influence\n    */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    pool_pledge_influence() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} expansion_rate\n    */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    expansion_rate() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} treasury_growth_rate\n    */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    treasury_growth_rate() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} d\n    */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    d() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {Nonce} extra_entropy\n    */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n    * @returns {Nonce | undefined}\n    */\n    extra_entropy() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersions} protocol_version\n    */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersions);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n    * @returns {ProtocolVersions | undefined}\n    */\n    protocol_version() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} min_pool_cost\n    */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    min_pool_cost() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ada_per_utxo_byte\n    */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    ada_per_utxo_byte() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Costmdls} cost_models\n    */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n    * @returns {Costmdls | undefined}\n    */\n    cost_models() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} execution_costs\n    */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n    * @returns {ExUnitPrices | undefined}\n    */\n    execution_costs() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_tx_ex_units\n    */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_tx_ex_units() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_block_ex_units\n    */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_block_ex_units() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    */\n    set_max_value_size(max_value_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_value_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ProtocolParamUpdate}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProtocolVersion {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_protocolversion_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersion}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_from_bytes(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    major() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_major(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    minor() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_minor(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} major\n    * @param {number} minor\n    * @returns {ProtocolVersion}\n    */\n    static new(major, minor) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProtocolVersions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersions.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_protocolversions_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersions}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_from_bytes(ptr0, len0);\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersions}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_new();\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ProtocolVersion}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_get(this.ptr, index);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersion} elem\n    */\n    add(elem) {\n        _assertClass(elem, ProtocolVersion);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversions_add(this.ptr, elem.ptr);\n    }\n}\n/**\n* ED25519 key used as public key\n*/\nclass PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_publickey_free(ptr);\n    }\n    /**\n    * Get public key from its bech32 representation\n    * Example:\n    * ```javascript\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_from_bech32(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_from_bytes(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Ed25519Signature} signature\n    * @returns {boolean}\n    */\n    verify(data, signature) {\n        var ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass PublicKeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_publickeys_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PublicKey}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} key\n    */\n    add(key) {\n        _assertClass(key, PublicKey);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/**\n*/\nclass Redeemer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemer_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemer}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_from_bytes(ptr0, len0);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    tag() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    index() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n    data() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {ExUnits}\n    */\n    ex_units() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {RedeemerTag} tag\n    * @param {BigNum} index\n    * @param {PlutusData} data\n    * @param {ExUnits} ex_units\n    * @returns {Redeemer}\n    */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/**\n*/\nclass RedeemerTag {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemertag_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RedeemerTag}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_from_bytes(ptr0, len0);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_spend() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_mint() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_cert() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_reward() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Redeemers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_from_bytes(ptr0, len0);\n        return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemers}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Redeemer}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n    * @param {Redeemer} elem\n    */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Relay {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_relay_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relay}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_from_bytes(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostAddr} single_host_addr\n    * @returns {Relay}\n    */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostName} single_host_name\n    * @returns {Relay}\n    */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {MultiHostName} multi_host_name\n    * @returns {Relay}\n    */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {SingleHostAddr | undefined}\n    */\n    as_single_host_addr() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {SingleHostName | undefined}\n    */\n    as_single_host_name() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {MultiHostName | undefined}\n    */\n    as_multi_host_name() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass Relays {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_relays_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relays}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_from_bytes(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Relay}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {Relay} elem\n    */\n    add(elem) {\n        _assertClass(elem, Relay);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass RewardAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {RewardAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {RewardAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass RewardAddresses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RewardAddresses}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_from_bytes(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {RewardAddress}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} elem\n    */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ScriptAll {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptall_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAll}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_from_bytes(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAll}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptAny {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptany_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAny}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_from_bytes(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAny}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptDataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_from_bech32(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptDataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_from_bytes(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scripthash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_from_bech32(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_from_bytes(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scripthashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_from_bytes(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ScriptHash}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ScriptNOfK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptNOfK}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_from_bytes(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    n() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_n(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {number} n\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptNOfK}\n    */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptPubkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptPubkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_from_bytes(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    addr_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} addr_keyhash\n    * @returns {ScriptPubkey}\n    */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/**\n*/\nclass SingleHostAddr {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostAddr}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_from_bytes(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {Ipv4 | undefined}\n    */\n    ipv4() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Ipv6 | undefined}\n    */\n    ipv6() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {Ipv4 | undefined} ipv4\n    * @param {Ipv6 | undefined} ipv6\n    * @returns {SingleHostAddr}\n    */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/**\n*/\nclass SingleHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_singlehostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_from_bytes(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {DNSRecordAorAAAA}\n    */\n    dns_name() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {DNSRecordAorAAAA} dns_name\n    * @returns {SingleHostName}\n    */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeCredential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakecredential_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash | undefined}\n    */\n    to_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHash | undefined}\n    */\n    to_scripthash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_kind(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredential}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_bytes(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredentials}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_from_bytes(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {StakeCredential}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} elem\n    */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass StakeDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_from_bytes(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @returns {StakeDelegation}\n    */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeDeregistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDeregistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_from_bytes(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeDeregistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_from_bytes(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeRegistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass Strings {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_strings_free(ptr);\n    }\n    /**\n    * @returns {Strings}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {string}\n    */\n    get(index) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} elem\n    */\n    add(elem) {\n        var ptr0 = passStringToWasm0(elem, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nclass TimelockExpiry {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockExpiry}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_from_bytes(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockExpiry}\n    */\n    static new(slot) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_new(slot);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/**\n*/\nclass TimelockStart {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_timelockstart_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockStart}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_from_bytes(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockStart}\n    */\n    static new(slot) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_new(slot);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/**\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transaction_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_from_bytes(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    body() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    witness_set() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n    auxiliary_data() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} body\n    * @param {TransactionWitnessSet} witness_set\n    * @param {AuxiliaryData | undefined} auxiliary_data\n    * @returns {Transaction}\n    */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.ptr;\n            auxiliary_data.ptr = 0;\n        }\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBodies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBodies}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_from_bytes(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBody}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_from_bytes(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    inputs() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    outputs() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    fee() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    ttl() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_ttl(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n    certs() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n    withdrawals() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * @param {Update} update\n    */\n    set_update(update) {\n        _assertClass(update, Update);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n    * @returns {Update | undefined}\n    */\n    update() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n    * @param {AuxiliaryDataHash} auxiliary_data_hash\n    */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataHash | undefined}\n    */\n    auxiliary_data_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    validity_start_interval() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_validity_start_interval(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Mint} mint\n    */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n    * @returns {Mint | undefined}\n    */\n    multiassets() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_multiassets(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @param {ScriptDataHash} script_data_hash\n    */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n    * @returns {ScriptDataHash | undefined}\n    */\n    script_data_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} collateral\n    */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    collateral() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHashes} required_signers\n    */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n    required_signers() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @param {NetworkId} network_id\n    */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n    * @returns {NetworkId | undefined}\n    */\n    network_id() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @param {number | undefined} ttl\n    * @returns {TransactionBody}\n    */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n        return TransactionBody.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_key_input(hash, input, amount) {\n        _assertClass(hash, Ed25519KeyHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_script_input(hash, input, amount) {\n        _assertClass(hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_bootstrap_input(hash, input, amount) {\n        _assertClass(hash, ByronAddress);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @returns {BigNum}\n    */\n    fee_for_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} output\n    */\n    add_output(output) {\n        _assertClass(output, TransactionOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {TransactionOutput} output\n    * @returns {BigNum}\n    */\n    fee_for_output(output) {\n        _assertClass(output, TransactionOutput);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} fee\n    */\n    set_fee(fee) {\n        _assertClass(fee, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_fee(this.ptr, fee.ptr);\n    }\n    /**\n    * @param {number} ttl\n    */\n    set_ttl(ttl) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_ttl(this.ptr, ttl);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @param {AuxiliaryData} auxiliary_data\n    */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n    * @param {LinearFee} linear_fee\n    * @param {BigNum} minimum_utxo_val\n    * @param {BigNum} pool_deposit\n    * @param {BigNum} key_deposit\n    * @param {number} max_value_size\n    * @param {number} max_tx_size\n    * @returns {TransactionBuilder}\n    */\n    static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit, max_value_size, max_tx_size) {\n        _assertClass(linear_fee, LinearFee);\n        _assertClass(minimum_utxo_val, BigNum);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr, max_value_size, max_tx_size);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * does not include refunds or withdrawals\n    * @returns {Value}\n    */\n    get_explicit_input() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_explicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * withdrawals and refunds\n    * @returns {Value}\n    */\n    get_implicit_input() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_implicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * does not include fee\n    * @returns {Value}\n    */\n    get_explicit_output() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_explicit_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    get_deposit() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_deposit(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    get_fee_if_set() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * @param {Address} address\n    * @returns {boolean}\n    */\n    add_change_if_needed(address) {\n        _assertClass(address, Address);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    full_size() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_full_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    output_sizes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    build() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_build(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n    * this is done to simplify the library code, but can be fixed later\n    * @returns {BigNum}\n    */\n    min_fee() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_min_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {TransactionHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_from_bech32(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_from_bytes(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactioninput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_from_bytes(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionHash}\n    */\n    transaction_id() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    index() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionHash} transaction_id\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_new(transaction_id.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_from_bytes(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionMetadatum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_from_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataMap} map\n    * @returns {TransactionMetadatum}\n    */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataList} list\n    * @returns {TransactionMetadatum}\n    */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {TransactionMetadatum}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {TransactionMetadatum}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_text(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    as_map() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_map(this.ptr);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    as_list() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_list(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n    as_int() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_int(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    as_text() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass TransactionMetadatumLabels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatumLabels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_from_bytes(ptr0, len0);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_from_bytes(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    address() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n    amount() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {DataHash | undefined}\n    */\n    data_hash() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n    * @param {DataHash} data_hash\n    */\n    set_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_set_data_hash(this.ptr, data_hash.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {Value} amount\n    * @returns {TransactionOutput}\n    */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionOutputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_from_bytes(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionOutput}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionUnspentOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionUnspentOutput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_from_bytes(ptr0, len0);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {TransactionOutput} output\n    * @returns {TransactionUnspentOutput}\n    */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInput}\n    */\n    input() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n    output() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionWitnessSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSet}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_from_bytes(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitnesses} vkeys\n    */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses | undefined}\n    */\n    vkeys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitnesses} bootstraps\n    */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses | undefined}\n    */\n    bootstraps() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} plutus_data\n    */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    plutus_data() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Redeemers} redeemers\n    */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n    * @returns {Redeemers | undefined}\n    */\n    redeemers() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionWitnessSets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSets}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_from_bytes(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionWitnessSet}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {TransactionWitnessSet} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass URL {\n\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_url_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {URL}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_from_bytes(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @param {string} url\n    * @returns {URL}\n    */\n    static new(url) {\n        var ptr0 = passStringToWasm0(url, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_new(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    url() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass UnitInterval {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_unitinterval_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {UnitInterval}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_from_bytes(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    numerator() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_numerator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    denominator() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_denominator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} numerator\n    * @param {BigNum} denominator\n    * @returns {UnitInterval}\n    */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/**\n*/\nclass Update {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_update_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Update}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_from_bytes(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    proposed_protocol_parameter_updates() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n    * @param {number} epoch\n    * @returns {Update}\n    */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/**\n*/\nclass VRFCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_from_bytes(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    output() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    proof() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_proof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} output\n    * @param {Uint8Array} proof\n    * @returns {VRFCert}\n    */\n    static new(output, proof) {\n        var ptr0 = passArray8ToWasm0(output, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(proof, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_new(ptr0, len0, ptr1, len1);\n        return VRFCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass VRFKeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFKeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_from_bech32(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFKeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_from_bytes(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n}\n/**\n*/\nclass VRFVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_from_bech32(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_from_bytes(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass Value {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_value_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Value}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_from_bytes(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {Value}\n    */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coin() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n    * @returns {MultiAsset | undefined}\n    */\n    multiasset() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n    * @param {Value} rhs\n    * @returns {Value}\n    */\n    checked_add(rhs) {\n        _assertClass(rhs, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_checked_add(this.ptr, rhs.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    checked_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_checked_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * note: values are only partially comparable\n    * @param {Value} rhs_value\n    * @returns {number | undefined}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nclass Vkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_from_bytes(ptr0, len0);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} pk\n    * @returns {Vkey}\n    */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    public_key() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass Vkeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeys_free(ptr);\n    }\n    /**\n    * @returns {Vkeys}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkey}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Vkeywitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_from_bytes(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @returns {Vkeywitness}\n    */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nclass Vkeywitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkeywitness}\n    */\n    get(index) {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Withdrawals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_withdrawals_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Withdrawals}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_from_bytes(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {Withdrawals}\n    */\n    static new() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {RewardAddress} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    keys() {\n        var ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_3a746f2619705add(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_call_f54d3a6dadb199ca(arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_jsval_eq(arg0, arg1) {\n    var ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nfunction __wbg_self_ac379e780a0d8b94(arg0) {\n    var ret = getObject(arg0).self;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_crypto_1e4302b85d4f64a2(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_undefined(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nfunction __wbg_getRandomValues_1b4ba144162a5c9e(arg0) {\n    var ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_require_6461b1e9a0d7c34a(arg0, arg1) {\n    var ret = __webpack_require__(\"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive\")(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_randomFillSync_1b52c8482374c55b(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nfunction __wbg_getRandomValues_1ef11e888e5228e9(arg0, arg1, arg2) {\n    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n};\n\nfunction __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbindgen_debug_string(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nfunction __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n\n});\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js?");

/***/ }),

/***/ "./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/ sync ***!
  \*****************************************************************************************************************************************/
/***/ (function(module) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/_sync?");

/***/ }),

/***/ "./src/api/config.js":
/*!***************************!*\
  !*** ./src/api/config.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NETWORK\": function() { return /* binding */ NETWORK; },\n/* harmony export */   \"ERROR\": function() { return /* binding */ ERROR; },\n/* harmony export */   \"TX\": function() { return /* binding */ TX; },\n/* harmony export */   \"cardano\": function() { return /* binding */ cardano; },\n/* harmony export */   \"cardanoPress\": function() { return /* binding */ cardanoPress; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar NETWORK = {\n  0: 'testnet',\n  1: 'mainnet'\n};\nvar ERROR = {\n  accessDenied: 'Access denied',\n  wrongPassword: 'Wrong password',\n  txTooBig: 'Transaction too big',\n  txNotPossible: 'Transaction not possible',\n  storeNotEmpty: 'Storage key is already set',\n  onlyOneAccount: 'Only one account exist in the wallet',\n  fullMempool: 'fullMempool'\n};\nvar TX = {\n  invalid_hereafter: 3600 * 2 //2h from current slot\n\n};\nvar cardano = window.cardano || {\n  enable: function () {\n    var _enable = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", null);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function enable() {\n      return _enable.apply(this, arguments);\n    }\n\n    return enable;\n  }(),\n  isEnabled: function () {\n    var _isEnabled = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", false);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function isEnabled() {\n      return _isEnabled.apply(this, arguments);\n    }\n\n    return isEnabled;\n  }(),\n  getUtxos: function () {\n    var _getUtxos = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", []);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getUtxos() {\n      return _getUtxos.apply(this, arguments);\n    }\n\n    return getUtxos;\n  }(),\n  getChangeAddress: function () {\n    var _getChangeAddress = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", '');\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function getChangeAddress() {\n      return _getChangeAddress.apply(this, arguments);\n    }\n\n    return getChangeAddress;\n  }(),\n  getRewardAddress: function () {\n    var _getRewardAddress = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee5() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", '');\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function getRewardAddress() {\n      return _getRewardAddress.apply(this, arguments);\n    }\n\n    return getRewardAddress;\n  }(),\n  getNetworkId: function () {\n    var _getNetworkId = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee6() {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", 0);\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function getNetworkId() {\n      return _getNetworkId.apply(this, arguments);\n    }\n\n    return getNetworkId;\n  }(),\n  signTx: function () {\n    var _signTx = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee7(tx) {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", '');\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function signTx(_x) {\n      return _signTx.apply(this, arguments);\n    }\n\n    return signTx;\n  }(),\n  submitTx: function () {\n    var _submitTx = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee8(tx) {\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", '');\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function submitTx(_x2) {\n      return _submitTx.apply(this, arguments);\n    }\n\n    return submitTx;\n  }(),\n  onNetworkChange: function onNetworkChange(tx) {\n    return null;\n  }\n};\nvar cardanoPress = window.cardanoPress || {\n  ajaxUrl: '',\n  _nonce: ''\n};\n\n//# sourceURL=webpack://ronin-universe/./src/api/config.js?");

/***/ }),

/***/ "./src/api/util.js":
/*!*************************!*\
  !*** ./src/api/util.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"generateUuid\": function() { return /* binding */ generateUuid; },\n/* harmony export */   \"addNotice\": function() { return /* binding */ addNotice; },\n/* harmony export */   \"removeNotice\": function() { return /* binding */ removeNotice; },\n/* harmony export */   \"multiAssetCount\": function() { return /* binding */ multiAssetCount; },\n/* harmony export */   \"getProtocol\": function() { return /* binding */ getProtocol; },\n/* harmony export */   \"getDelegation\": function() { return /* binding */ getDelegation; },\n/* harmony export */   \"saveWalletTx\": function() { return /* binding */ saveWalletTx; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar generateUuid = function generateUuid() {\n  var s4 = function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }; //Format: 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\nvar addNotice = function addNotice(detail) {\n  window.dispatchEvent(new CustomEvent('cardanoPress:addNotice', {\n    detail: detail\n  }));\n};\nvar removeNotice = function removeNotice(detail) {\n  window.dispatchEvent(new CustomEvent('cardanoPress:removeNotice', {\n    detail: detail\n  }));\n};\n/**\n * @param {MultiAsset} multiAsset\n * @returns\n */\n\nvar multiAssetCount = /*#__PURE__*/function () {\n  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(multiAsset) {\n    var count, policies, j, policy, policyAssets, assetNames, k;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (multiAsset) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 2:\n            count = 0;\n            policies = multiAsset.keys();\n\n            for (j = 0; j < multiAsset.len(); j++) {\n              policy = policies.get(j);\n              policyAssets = multiAsset.get(policy);\n              assetNames = policyAssets.keys();\n\n              for (k = 0; k < assetNames.len(); k++) {\n                count++;\n              }\n            }\n\n            return _context.abrupt(\"return\", count);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function multiAssetCount(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getProtocol = /*#__PURE__*/function () {\n  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(network) {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(cardanoPress.ajaxUrl, {\n              method: 'POST',\n              body: new URLSearchParams({\n                _wpnonce: cardanoPress._nonce,\n                action: 'cardanopress_protocol_parameters',\n                query_network: network\n              })\n            }).then(function (response) {\n              return response.json();\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getProtocol(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getDelegation = /*#__PURE__*/function () {\n  var _ref3 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3(network, rewardAddress) {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(cardanoPress.ajaxUrl, {\n              method: 'POST',\n              body: new URLSearchParams({\n                _wpnonce: cardanoPress._nonce,\n                action: 'cardanopress_pool_delegation',\n                query_network: network,\n                reward_address: rewardAddress\n              })\n            }).then(function (response) {\n              return response.json();\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getDelegation(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar saveWalletTx = /*#__PURE__*/function () {\n  var _ref4 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(network, changeAddress, txHash) {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch(cardanoPress.ajaxUrl, {\n              method: 'POST',\n              body: new URLSearchParams({\n                _wpnonce: cardanoPress._nonce,\n                action: 'cardanopress_wallet_transaction',\n                query_network: network,\n                wallet_address: changeAddress,\n                transaction_hash: txHash\n              })\n            }).then(function (response) {\n              return response.json();\n            });\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function saveWalletTx(_x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n//# sourceURL=webpack://ronin-universe/./src/api/util.js?");

/***/ }),

/***/ "./src/api/wallet.js":
/*!***************************!*\
  !*** ./src/api/wallet.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"prepareTx\": function() { return /* binding */ prepareTx; },\n/* harmony export */   \"buildTx\": function() { return /* binding */ buildTx; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"./src/api/config.js\");\n/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\n/* harmony import */ var _lib_coinSelection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/coinSelection */ \"./src/lib/coinSelection.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ \"./src/api/util.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__, _lib_coinSelection__WEBPACK_IMPORTED_MODULE_3__]);\n([_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__, _lib_coinSelection__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\n\n\n\n\n\n\nvar prepareTx = /*#__PURE__*/function () {\n  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(lovelaceValue, paymentAddress) {\n    var outputs;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            outputs = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.TransactionOutputs[\"new\"]();\n            outputs.add(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.TransactionOutput[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Address.from_bech32(paymentAddress), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(lovelaceValue))));\n            return _context.abrupt(\"return\", outputs);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function prepareTx(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar buildTx = /*#__PURE__*/function () {\n  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(changeAddress, utxos, outputs, protocolParameters, certificates) {\n    var totalAssets, selection, inputs, txBuilder, i, utxo, change, changeMultiAssets, partialChange, partialMultiAssets, policies, makeSplit, minAda, transaction, size;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (certificates === void 0) {\n              certificates = null;\n            }\n\n            _context2.next = 3;\n            return (0,_util__WEBPACK_IMPORTED_MODULE_4__.multiAssetCount)(outputs.get(0).amount().multiasset());\n\n          case 3:\n            totalAssets = _context2.sent;\n            _lib_coinSelection__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setProtocolParameters(protocolParameters.minUtxo, protocolParameters.linearFee.minFeeA.toString(), protocolParameters.linearFee.minFeeB.toString(), protocolParameters.maxTxSize.toString());\n            _context2.next = 7;\n            return _lib_coinSelection__WEBPACK_IMPORTED_MODULE_3__[\"default\"].randomImprove(utxos, outputs, 20 + totalAssets);\n\n          case 7:\n            selection = _context2.sent;\n            inputs = selection.input;\n            txBuilder = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.TransactionBuilder[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.LinearFee[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.linearFee.minFeeA.toString()), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.linearFee.minFeeB.toString())), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.minUtxo), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.poolDeposit), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.keyDeposit), protocolParameters.maxValSize, protocolParameters.maxTxSize);\n\n            if (certificates) {\n              txBuilder.set_certs(certificates);\n            }\n\n            for (i = 0; i < inputs.length; i++) {\n              utxo = inputs[i];\n              txBuilder.add_input(utxo.output().address(), utxo.input(), utxo.output().amount());\n            }\n\n            txBuilder.add_output(outputs.get(0));\n            change = selection.change;\n            changeMultiAssets = change.multiasset(); // check if change value is too big for single output\n\n            if (changeMultiAssets && change.to_bytes().length * 2 > protocolParameters.maxValSize) {\n              partialChange = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str('0'));\n              partialMultiAssets = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.MultiAsset[\"new\"]();\n              policies = changeMultiAssets.keys();\n\n              makeSplit = function makeSplit() {\n                for (var j = 0; j < changeMultiAssets.len(); j++) {\n                  var policy = policies.get(j);\n                  var policyAssets = changeMultiAssets.get(policy);\n                  var assetNames = policyAssets.keys();\n                  var assets = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Assets[\"new\"]();\n\n                  for (var k = 0; k < assetNames.len(); k++) {\n                    var policyAsset = assetNames.get(k);\n                    var quantity = policyAssets.get(policyAsset);\n                    assets.insert(policyAsset, quantity); //check size\n\n                    var checkMultiAssets = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.MultiAsset.from_bytes(partialMultiAssets.to_bytes());\n                    checkMultiAssets.insert(policy, assets);\n                    var checkValue = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str('0'));\n                    checkValue.set_multiasset(checkMultiAssets);\n\n                    if (checkValue.to_bytes().length * 2 >= protocolParameters.maxValSize) {\n                      partialMultiAssets.insert(policy, assets);\n                      return;\n                    }\n                  }\n\n                  partialMultiAssets.insert(policy, assets);\n                }\n              };\n\n              makeSplit();\n              partialChange.set_multiasset(partialMultiAssets);\n              minAda = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.min_ada_required(partialChange, _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.BigNum.from_str(protocolParameters.minUtxo));\n              partialChange.set_coin(minAda);\n              txBuilder.add_output(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.TransactionOutput[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Address.from_bech32(changeAddress), partialChange));\n            }\n\n            txBuilder.set_ttl(protocolParameters.slot + _config__WEBPACK_IMPORTED_MODULE_2__.TX.invalid_hereafter);\n            txBuilder.add_change_if_needed(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Address.from_bech32(changeAddress));\n            transaction = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.Transaction[\"new\"](txBuilder.build(), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_5__.TransactionWitnessSet[\"new\"]());\n            size = transaction.to_bytes().length * 2;\n\n            if (!(size > protocolParameters.maxTxSize)) {\n              _context2.next = 22;\n              break;\n            }\n\n            throw _config__WEBPACK_IMPORTED_MODULE_2__.ERROR.txTooBig;\n\n          case 22:\n            return _context2.abrupt(\"return\", transaction);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function buildTx(_x3, _x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n});\n\n//# sourceURL=webpack://ronin-universe/./src/api/wallet.js?");

/***/ }),

/***/ "./src/delegation.js":
/*!***************************!*\
  !*** ./src/delegation.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api/util */ \"./src/api/util.js\");\n/* harmony import */ var _lib_delegation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/delegation */ \"./src/lib/delegation.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_delegation__WEBPACK_IMPORTED_MODULE_3__]);\n_lib_delegation__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\nwindow.addEventListener('alpine:init', function () {\n  var Alpine = window.Alpine || {};\n  Alpine.data('poolDelegation', function () {\n    return {\n      isProcessing: false,\n      transactionHash: '',\n      handleDelegation: function handleDelegation() {\n        var _this = this;\n\n        return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n          var response;\n          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this.transactionHash = '';\n                  (0,_api_util__WEBPACK_IMPORTED_MODULE_2__.addNotice)({\n                    id: 'delegation',\n                    type: 'info',\n                    text: 'Processing...'\n                  });\n                  _this.isProcessing = true;\n                  _context.next = 5;\n                  return (0,_lib_delegation__WEBPACK_IMPORTED_MODULE_3__.handleDelegation)();\n\n                case 5:\n                  response = _context.sent;\n                  (0,_api_util__WEBPACK_IMPORTED_MODULE_2__.removeNotice)('delegation');\n\n                  if (response.success) {\n                    _this.transactionHash = response.data;\n                    (0,_api_util__WEBPACK_IMPORTED_MODULE_2__.addNotice)({\n                      type: 'info',\n                      text: 'Delegation successful'\n                    });\n                  } else {\n                    (0,_api_util__WEBPACK_IMPORTED_MODULE_2__.addNotice)({\n                      type: 'warning',\n                      text: response.data\n                    });\n                  }\n\n                  _this.isProcessing = false;\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))();\n      }\n    };\n  });\n});\n});\n\n//# sourceURL=webpack://ronin-universe/./src/delegation.js?");

/***/ }),

/***/ "./src/lib/coinSelection.js":
/*!**********************************!*\
  !*** ./src/lib/coinSelection.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__]);\n_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\n/**\n * BerryPool implementation of the __Random-Improve__ coin selection algorithm.\n *\n * = Overview\n *\n * The __Random-Improve__ coin selection algorithm works in __two phases__, by\n * /first/ selecting UTxO entries /at random/ to pay for each of the given\n * outputs, and /then/ attempting to /improve/ upon each of the selections.\n *\n * === Phase 1: Random Selection\n *\n * __In this phase, the algorithm randomly selects a minimal set of UTxO__\n * __entries to pay for each of the given outputs.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /descending order of coin value/.\n *\n *   *  maintains a /remaining UTxO set/, initially equal to the given\n *      /UTxO set/ parameter.\n *\n *   *  based on every output nature, generate a /native token UTxO subset/\n *      to narrow down to useful UTxO\n *\n *   *  maintains an /accumulated coin selection/, which is initially /empty/.\n *\n * For each output of value __/v/__, the algorithm /randomly/ selects entries\n * from the /remaining UTxO set/, until the total value of selected entries is\n * greater than or equal to __/v/__. The selected entries are then associated\n * with that output, and removed from the /remaining UTxO set/.\n *\n * This phase ends when every output has been associated with a selection of\n * UTxO entries.\n *\n * However, if the remaining UTxO set is completely exhausted before all\n * outputs can be processed, the algorithm terminates with an error.\n *\n * === Phase 2: Improvement\n *\n * __In this phase, the algorithm attempts to improve upon each of the UTxO__\n * __selections made in the previous phase, by conservatively expanding the__\n * __selection made for each output.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /ascending order of coin value/.\n *\n *   *  continues to maintain the /remaining UTxO set/ produced by the previous\n *      phase.\n *\n *   *  maintains an /accumulated coin selection/, initiated from previous phase.\n *\n * For each output of value __/v/__, the algorithm:\n *\n *  1.  __Calculates a /target range/__ for the total value of inputs used to\n *      pay for that output, defined by the triplet:\n *\n *      (/minimum/, /ideal/, /maximum/) = (/v/, /2v/, /3v/)\n *\n *  2.  __Attempts to /improve/ upon the /existing UTxO selection/__ for that\n *      output, by repeatedly selecting additional entries at random from the\n *      /remaining UTxO set/, stopping when the selection can be improved upon\n *      no further.\n *\n *      A selection with value /v1/ is considered to be an /improvement/ over a\n *      selection with value /v0/ if __all__ of the following conditions are\n *      satisfied:\n *\n *       * __Condition 1__: we have moved closer to the /ideal/ value:\n *\n *             abs (/ideal/ − /v1/) < abs (/ideal/ − /v0/)\n *\n *       * __Condition 2__: we have not exceeded the /maximum/ value:\n *\n *             /v1/ ≤ /maximum/\n *\n *       * __Condition 3__: when counting cumulatively across all outputs\n *       considered so far, we have not selected more than the /maximum/ number\n *       of UTxO entries specified by 'limit'.\n *\n *  3.  __Creates a /change value/__ for the output, equal to the total value\n *      of the /final UTxO selection/ for that output minus the value /v/ of\n *      that output.\n *\n *  4.  __Updates the /accumulated coin selection/__:\n *\n *       * Adds the /output/ to 'outputs'.\n *       * Adds the /improved UTxO selection/ to 'inputs'.\n *       * Adds the /change value/ to 'change'.\n *\n * This phase ends when every output has been processed, __or__ when the\n * /remaining UTxO set/ has been exhausted, whichever occurs sooner.\n *\n * = Termination\n *\n * When both phases are complete, the algorithm terminates.\n *\n * The /accumulated coin selection/ and /remaining UTxO set/ are returned to\n * the caller.\n *\n * === Failure Modes\n *\n * The algorithm terminates with an __error__ if:\n *\n *  1.  The /total value/ of the initial UTxO set (the amount of money\n *      /available/) is /less than/ the total value of the output list (the\n *      amount of money /required/).\n *\n *      See: __'InputsExhaustedError'__.\n *\n *  2.  The /number/ of UTxO entries needed to pay for the requested outputs\n *      would /exceed/ the upper limit specified by 'limit'.\n *\n *      See: __'InputLimitExceededError'__.\n *\n * == Motivating Principles\n *\n * There are several motivating principles behind the design of the algorithm.\n *\n * === Principle 1: Dust Management\n *\n * The probability that random selection will choose dust entries from a UTxO\n * set increases with the proportion of dust in the set.\n *\n * Therefore, for a UTxO set with a large amount of dust, there's a high\n * probability that a random subset will include a large amount of dust.\n *\n * === Principle 2: Change Management\n *\n * Ideally, coin selection algorithms should, over time, create a UTxO set that\n * has /useful/ outputs: outputs that will allow us to process future payments\n * with a minimum number of inputs.\n *\n * If for each payment request of value __/v/__ we create a change output of\n * /roughly/ the same value __/v/__, then we will end up with a distribution of\n * change values that matches the typical value distribution of payment\n * requests.\n *\n * === Principle 3: Performance Management\n *\n * Searching the UTxO set for additional entries to improve our change outputs\n * is /only/ useful if the UTxO set contains entries that are sufficiently\n * small enough. But it is precisely when the UTxO set contains many small\n * entries that it is less likely for a randomly-chosen UTxO entry to push the\n * total above the upper bound.\n */\n\n/**\n * @typedef {Value[]} AmountList - List of 'Value' object\n */\n\n/**\n * @typedef {TransactionUnspentOutput[]} UTxOList - List of UTxO\n */\n\n/**\n * @typedef {Object} UTxOSelection - Coin Selection algorithm core object\n * @property {UTxOList} selection - Accumulated UTxO set.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {UTxOList} subset - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n */\n\n/**\n * @typedef {Object} ImproveRange - ImproveRange\n * @property {Value} ideal - Requested amount * 2\n * @property {Value} maximum - Requested amount * 3\n */\n\n/**\n * @typedef {Object} SelectionResult - Coin Selection algorithm return\n * @property {UTxOList} input - Accumulated UTxO set.\n * @property {OutputList} output - Requested outputs.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n * @property {Value} change - Accumulated change amount.\n */\n\n/**\n * @typedef {Object} ProtocolParameters\n * @property {int} minUTxO\n * @property {int} minFeeA\n * @property {int} minFeeB\n * @property {int} maxTxSize\n */\n\n/**\n * @type {ProtocolParameters}\n */\n\nvar protocolParameters = null;\n/**\n * CoinSelection Module.\n * @module src/lib/CoinSelection\n */\n\nvar CoinSelection = {\n  /**\n   * Set protocol parameters required by the algorithm\n   * @param {string} minUTxO\n   * @param {string} minFeeA\n   * @param {string} minFeeB\n   * @param {string} maxTxSize\n   */\n  setProtocolParameters: function setProtocolParameters(minUTxO, minFeeA, minFeeB, maxTxSize) {\n    protocolParameters = {\n      minUTxO: minUTxO,\n      minFeeA: minFeeA,\n      minFeeB: minFeeB,\n      maxTxSize: maxTxSize\n    };\n  },\n\n  /**\n   * Random-Improve coin selection algorithm\n   * @param {UTxOList} inputs - The set of inputs available for selection.\n   * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n   * @param {int} limit - A limit on the number of inputs that can be selected.\n   * @return {SelectionResult} - Coin Selection algorithm return\n   */\n  randomImprove: function () {\n    var _randomImprove = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(inputs, outputs, limit) {\n      var _minUTxOValue, utxoSelection, mergedOutputsAmounts, splitOutputsAmounts, i, _i, range, change, minAmount, maxFee, minAda;\n\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (protocolParameters) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('Protocol parameters not set. Use setProtocolParameters().');\n\n            case 2:\n              _minUTxOValue = BigInt(outputs.len()) * BigInt(protocolParameters.minUTxO);\n              /** @type {UTxOSelection} */\n\n              utxoSelection = {\n                selection: [],\n                remaining: [].concat(inputs),\n                // Shallow copy\n                subset: [],\n                amount: _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0'))\n              };\n              mergedOutputsAmounts = mergeOutputsAmounts(outputs); // Explode amount in an array of unique asset amount for comparison's sake\n\n              splitOutputsAmounts = splitAmounts(mergedOutputsAmounts); // Phase 1: Select enough input\n\n              for (i = 0; i < splitOutputsAmounts.length; i++) {\n                createSubSet(utxoSelection, splitOutputsAmounts[i]); // Narrow down for NatToken UTxO\n\n                utxoSelection = select(utxoSelection, splitOutputsAmounts[i], limit, _minUTxOValue);\n              } // Phase 2: Improve\n\n\n              splitOutputsAmounts = sortAmountList(splitOutputsAmounts);\n\n              for (_i = 0; _i < splitOutputsAmounts.length; _i++) {\n                createSubSet(utxoSelection, splitOutputsAmounts[_i]); // Narrow down for NatToken UTxO\n\n                range = {};\n                range.ideal = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0')).checked_add(splitOutputsAmounts[_i]).checked_add(splitOutputsAmounts[_i]);\n                range.maximum = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0')).checked_add(range.ideal).checked_add(splitOutputsAmounts[_i]);\n                improve(utxoSelection, splitOutputsAmounts[_i], limit - utxoSelection.selection.length, range);\n              } // Insure change hold enough Ada to cover included native assets and fees\n\n\n              if (utxoSelection.remaining.length > 0) {\n                change = utxoSelection.amount.checked_sub(mergedOutputsAmounts);\n                minAmount = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.min_ada_required(change, _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(protocolParameters.minUTxO)));\n                maxFee = BigInt(protocolParameters.minFeeA) * BigInt(protocolParameters.maxTxSize) + BigInt(protocolParameters.minFeeB);\n                maxFee = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(maxFee.toString()));\n                minAmount = minAmount.checked_add(maxFee);\n\n                if (compare(change, minAmount) < 0) {\n                  // Not enough, add missing amount and run select one last time\n                  minAda = minAmount.checked_sub(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](change.coin())).checked_add(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](utxoSelection.amount.coin()));\n                  createSubSet(utxoSelection, minAda);\n                  utxoSelection = select(utxoSelection, minAda, limit, _minUTxOValue);\n                }\n              }\n\n              return _context.abrupt(\"return\", {\n                input: utxoSelection.selection,\n                output: outputs,\n                remaining: utxoSelection.remaining,\n                amount: utxoSelection.amount,\n                change: utxoSelection.amount.checked_sub(mergedOutputsAmounts)\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function randomImprove(_x, _x2, _x3) {\n      return _randomImprove.apply(this, arguments);\n    }\n\n    return randomImprove;\n  }()\n};\n/**\n * Use randomSelect & descSelect algorithm to select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\n\nfunction select(utxoSelection, outputAmount, limit, minUTxOValue) {\n  try {\n    utxoSelection = randomSelect(cloneUTxOSelection(utxoSelection), // Deep copy in case of fallback needed\n    outputAmount, limit - utxoSelection.selection.length, minUTxOValue);\n  } catch (e) {\n    if (e.message === 'INPUT_LIMIT_EXCEEDED') {\n      // Limit reached : Fallback on DescOrdAlgo\n      utxoSelection = descSelect(utxoSelection, outputAmount, minUTxOValue);\n    } else {\n      throw e;\n    }\n  }\n\n  return utxoSelection;\n}\n/**\n * Randomly select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\n\n\nfunction randomSelect(utxoSelection, outputAmount, limit, minUTxOValue) {\n  var nbFreeUTxO = utxoSelection.subset.length; // If quantity is met, return subset into remaining list and exit\n\n  if (isQtyFulfilled(outputAmount, utxoSelection.amount, minUTxOValue, nbFreeUTxO)) {\n    utxoSelection.remaining = [].concat(utxoSelection.remaining, utxoSelection.subset);\n    utxoSelection.subset = [];\n    return utxoSelection;\n  }\n\n  if (limit <= 0) {\n    throw new Error('INPUT_LIMIT_EXCEEDED');\n  }\n\n  if (nbFreeUTxO <= 0) {\n    if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n      throw new Error('MIN_UTXO_ERROR');\n    }\n\n    throw new Error('INPUTS_EXHAUSTED');\n  }\n  /** @type {TransactionUnspentOutput} utxo */\n\n\n  var utxo = utxoSelection.subset.splice(Math.floor(Math.random() * nbFreeUTxO), 1).pop();\n  utxoSelection.selection.push(utxo);\n  utxoSelection.amount = addAmounts(utxo.output().amount(), utxoSelection.amount);\n  return randomSelect(utxoSelection, outputAmount, limit - 1, minUTxOValue);\n}\n/**\n * Select enough UTxO in DESC order to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\n\n\nfunction descSelect(utxoSelection, outputAmount, minUTxOValue) {\n  // Sort UTxO subset in DESC order for required Output unit type\n  utxoSelection.subset = utxoSelection.subset.sort(function (a, b) {\n    return Number(searchAmountValue(outputAmount, b.output().amount()) - searchAmountValue(outputAmount, a.output().amount()));\n  });\n\n  do {\n    if (utxoSelection.subset.length <= 0) {\n      if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n        throw new Error('MIN_UTXO_ERROR');\n      }\n\n      throw new Error('INPUTS_EXHAUSTED');\n    }\n    /** @type {TransactionUnspentOutput} utxo */\n\n\n    var utxo = utxoSelection.subset.splice(0, 1).pop();\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(utxo.output().amount(), utxoSelection.amount);\n  } while (!isQtyFulfilled(outputAmount, utxoSelection.amount, minUTxOValue, utxoSelection.subset.length - 1)); // Quantity is met, return subset into remaining list and return selection\n\n\n  utxoSelection.remaining = [].concat(utxoSelection.remaining, utxoSelection.subset);\n  utxoSelection.subset = [];\n  return utxoSelection;\n}\n/**\n * Try to improve selection by increasing input amount in [2x,3x] range.\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {ImproveRange} range - Improvement range target values\n */\n\n\nfunction improve(utxoSelection, outputAmount, limit, range) {\n  var nbFreeUTxO = utxoSelection.subset.length;\n\n  if (compare(utxoSelection.amount, range.ideal) >= 0 || nbFreeUTxO <= 0 || limit <= 0) {\n    // Return subset in remaining\n    utxoSelection.remaining = [].concat(utxoSelection.remaining, utxoSelection.subset);\n    utxoSelection.subset = [];\n    return;\n  }\n  /** @type {TransactionUnspentOutput} utxo */\n\n\n  var utxo = utxoSelection.subset.splice(Math.floor(Math.random() * nbFreeUTxO), 1).pop();\n  var newAmount = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0')).checked_add(utxo.output().amount()).checked_add(outputAmount);\n\n  if (abs(getAmountValue(range.ideal) - getAmountValue(newAmount)) < abs(getAmountValue(range.ideal) - getAmountValue(outputAmount)) && compare(newAmount, range.maximum) <= 0) {\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(utxo.output().amount(), utxoSelection.amount);\n    limit--;\n  } else {\n    utxoSelection.remaining.push(utxo);\n  }\n\n  return improve(utxoSelection, outputAmount, limit, range);\n}\n/**\n * Compile all required outputs to a flat amounts list\n * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n * @return {Value} - The compiled set of amounts requested for payment.\n */\n\n\nfunction mergeOutputsAmounts(outputs) {\n  var compiledAmountList = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0'));\n\n  for (var i = 0; i < outputs.len(); i++) {\n    compiledAmountList = addAmounts(outputs.get(i).amount(), compiledAmountList);\n  }\n\n  return compiledAmountList;\n}\n/**\n * Add up an Amounts List values to another Amounts List\n * @param {Value} amounts - Set of amounts to be added.\n * @param {Value} compiledAmounts - The compiled set of amounts.\n * @return {Value}\n */\n\n\nfunction addAmounts(amounts, compiledAmounts) {\n  return compiledAmounts.checked_add(amounts);\n}\n/**\n * Split amounts contained in a single {Value} object in separate {Value} objects\n * @param {Value} amounts - Set of amounts to be split.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {AmountList}\n */\n\n\nfunction splitAmounts(amounts) {\n  var splitAmounts = [];\n\n  if (amounts.multiasset()) {\n    var mA = amounts.multiasset();\n\n    for (var i = 0; i < mA.keys().len(); i++) {\n      var scriptHash = mA.keys().get(i);\n\n      for (var j = 0; j < mA.get(scriptHash).keys().len(); j++) {\n        var _assets = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Assets[\"new\"]();\n\n        var assetName = mA.get(scriptHash).keys().get(j);\n\n        _assets.insert(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.AssetName.from_bytes(assetName.to_bytes()), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_bytes(mA.get(scriptHash).get(assetName).to_bytes()));\n\n        var _multiasset = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.MultiAsset[\"new\"]();\n\n        _multiasset.insert(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.ScriptHash.from_bytes(scriptHash.to_bytes()), _assets);\n\n        var _value = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str('0'));\n\n        _value.set_multiasset(_multiasset);\n\n        splitAmounts.push(_value);\n      }\n    }\n  } // Order assets by qty DESC\n\n\n  splitAmounts = sortAmountList(splitAmounts, 'DESC'); // Insure lovelace is last to account for min ada requirement\n\n  splitAmounts.push(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_bytes(amounts.coin().to_bytes())));\n  return splitAmounts;\n}\n/**\n * Sort a mismatched AmountList ASC/DESC\n * @param {AmountList} amountList - Set of mismatched amounts to be sorted.\n * @param {string} [sortOrder=ASC] - Order\n * @return {AmountList} - The sorted AmountList\n */\n\n\nfunction sortAmountList(amountList, sortOrder) {\n  if (sortOrder === void 0) {\n    sortOrder = 'ASC';\n  }\n\n  return amountList.sort(function (a, b) {\n    var sortInt = sortOrder === 'DESC' ? BigInt(-1) : BigInt(1);\n    return Number((getAmountValue(a) - getAmountValue(b)) * sortInt);\n  });\n}\n/**\n * Return BigInt amount value\n * @param {Value} amount\n * @return {bigint}\n */\n\n\nfunction getAmountValue(amount) {\n  var val = BigInt(0);\n  var lovelace = BigInt(amount.coin().to_str());\n\n  if (lovelace > 0) {\n    val = lovelace;\n  } else if (amount.multiasset() && amount.multiasset().len() > 0) {\n    var scriptHash = amount.multiasset().keys().get(0);\n    var assetName = amount.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(amount.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n/**\n * Search & Return BigInt amount value\n * @param {Value} needle\n * @param {Value} haystack\n * @return {bigint}\n */\n\n\nfunction searchAmountValue(needle, haystack) {\n  var val = BigInt(0);\n  var lovelace = BigInt(needle.coin().to_str());\n\n  if (lovelace > 0) {\n    val = BigInt(haystack.coin().to_str());\n  } else if (needle.multiasset() && haystack.multiasset() && needle.multiasset().len() > 0 && haystack.multiasset().len() > 0) {\n    var scriptHash = needle.multiasset().keys().get(0);\n    var assetName = needle.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(haystack.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n/**\n * Narrow down remaining UTxO set in case of native token, use full set for lovelace\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} output - Single compiled output qty requested for payment.\n */\n\n\nfunction createSubSet(utxoSelection, output) {\n  if (BigInt(output.coin().to_str()) < BigInt(1)) {\n    var subset = [];\n    var remaining = [];\n\n    for (var i = 0; i < utxoSelection.remaining.length; i++) {\n      if (compare(utxoSelection.remaining[i].output().amount(), output) !== undefined) {\n        subset.push(utxoSelection.remaining[i]);\n      } else {\n        remaining.push(utxoSelection.remaining[i]);\n      }\n    }\n\n    utxoSelection.subset = subset;\n    utxoSelection.remaining = remaining;\n  } else {\n    utxoSelection.subset = utxoSelection.remaining.splice(0, utxoSelection.remaining.length);\n  }\n}\n/**\n * Is Quantity Fulfilled Condition - Handle 'minUTxOValue' protocol parameter.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {Value} cumulatedAmount - Single compiled accumulated UTxO qty.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @param {int} nbFreeUTxO - Number of free UTxO available.\n * @return {boolean}\n */\n\n\nfunction isQtyFulfilled(outputAmount, cumulatedAmount, minUTxOValue, nbFreeUTxO) {\n  var amount = outputAmount;\n\n  if (minUTxOValue && BigInt(outputAmount.coin().to_str()) > 0) {\n    var minAmount = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.min_ada_required(cumulatedAmount, _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(minUTxOValue.toString()))); // Lovelace min amount to cover assets and number of output need to be met\n\n    if (compare(cumulatedAmount, minAmount) < 0) return false; // If requested Lovelace lower than minAmount, plan for change\n\n    if (compare(outputAmount, minAmount) < 0) {\n      amount = minAmount.checked_add(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(protocolParameters.minUTxO)));\n    } // Try covering the max fees\n\n\n    if (nbFreeUTxO > 0) {\n      var maxFee = BigInt(protocolParameters.minFeeA) * BigInt(protocolParameters.maxTxSize) + BigInt(protocolParameters.minFeeB);\n      maxFee = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(maxFee.toString()));\n      amount = amount.checked_add(maxFee);\n    }\n  }\n\n  return compare(cumulatedAmount, amount) >= 0;\n}\n/**\n * Return a deep copy of UTxOSelection\n * @param {UTxOSelection} utxoSelection\n * @return {UTxOSelection} Clone - Deep copy\n */\n\n\nfunction cloneUTxOSelection(utxoSelection) {\n  return {\n    selection: cloneUTxOList(utxoSelection.selection),\n    remaining: cloneUTxOList(utxoSelection.remaining),\n    subset: cloneUTxOList(utxoSelection.subset),\n    amount: cloneValue(utxoSelection.amount)\n  };\n}\n/**\n * Return a deep copy of an UTxO List\n * @param {UTxOList} utxoList\n * @return {UTxOList} Cone - Deep copy\n */\n\n\nvar cloneUTxOList = function cloneUTxOList(utxoList) {\n  return utxoList.map(function (utxo) {\n    return _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.TransactionUnspentOutput.from_bytes(utxo.to_bytes());\n  });\n};\n/**\n * Return a deep copy of a Value object\n * @param {Value} value\n * @return {Value} Cone - Deep copy\n */\n\n\nvar cloneValue = function cloneValue(value) {\n  return _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_2__.Value.from_bytes(value.to_bytes());\n}; // Helper\n\n\nfunction abs(big) {\n  return big < 0 ? big * BigInt(-1) : big;\n}\n/**\n * Compare a candidate value to the one in a group if present\n * @param {Value} group\n * @param {Value} candidate\n * @return {int} - -1 group lower, 0 equal, 1 group higher, undefined if no match\n */\n\n\nfunction compare(group, candidate) {\n  var gQty = BigInt(group.coin().to_str());\n  var cQty = BigInt(candidate.coin().to_str());\n\n  if (candidate.multiasset()) {\n    var cScriptHash = candidate.multiasset().keys().get(0);\n    var cAssetName = candidate.multiasset().get(cScriptHash).keys().get(0);\n\n    if (group.multiasset() && group.multiasset().len()) {\n      if (group.multiasset().get(cScriptHash) && group.multiasset().get(cScriptHash).get(cAssetName)) {\n        gQty = BigInt(group.multiasset().get(cScriptHash).get(cAssetName).to_str());\n        cQty = BigInt(candidate.multiasset().get(cScriptHash).get(cAssetName).to_str());\n      } else {\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  return gQty >= cQty ? gQty === cQty ? 0 : 1 : -1;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoinSelection);\n});\n\n//# sourceURL=webpack://ronin-universe/./src/lib/coinSelection.js?");

/***/ }),

/***/ "./src/lib/delegation.js":
/*!*******************************!*\
  !*** ./src/lib/delegation.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"handleDelegation\": function() { return /* binding */ handleDelegation; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _namiWallet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./namiWallet */ \"./src/lib/namiWallet.js\");\n/* harmony import */ var _api_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/wallet */ \"./src/api/wallet.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! buffer */ \"./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\");\n/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\n/* harmony import */ var _api_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../api/util */ \"./src/api/util.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_namiWallet__WEBPACK_IMPORTED_MODULE_2__, _api_wallet__WEBPACK_IMPORTED_MODULE_3__, _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__]);\n([_namiWallet__WEBPACK_IMPORTED_MODULE_2__, _api_wallet__WEBPACK_IMPORTED_MODULE_3__, _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nvar delegationCertificates = /*#__PURE__*/function () {\n  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(accountActive, poolHex) {\n    var stakeKeyHash, certificates;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.getStakeKeyHash)();\n\n          case 2:\n            stakeKeyHash = _context.sent;\n            certificates = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Certificates[\"new\"]();\n\n            if (!accountActive) {\n              certificates.add(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Certificate.new_stake_registration(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.StakeRegistration[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.StakeCredential.from_keyhash(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Ed25519KeyHash.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(stakeKeyHash, 'hex'))))));\n            }\n\n            certificates.add(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Certificate.new_stake_delegation(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.StakeDelegation[\"new\"](_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.StakeCredential.from_keyhash(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Ed25519KeyHash.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(stakeKeyHash, 'hex'))), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_6__.Ed25519KeyHash.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(poolHex, 'hex')))));\n            return _context.abrupt(\"return\", certificates);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function delegationCertificates(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar handleDelegation = /*#__PURE__*/function () {\n  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n    var network, responseProtocol, protocolParameters, rewardAddress, responseDelegation, delegationDetails, utxos, changeAddress, outputs, certificates, transaction, txHash;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.getNetwork)();\n\n          case 2:\n            network = _context2.sent;\n            _context2.next = 5;\n            return (0,_api_util__WEBPACK_IMPORTED_MODULE_5__.getProtocol)(network);\n\n          case 5:\n            responseProtocol = _context2.sent;\n\n            if (responseProtocol.success) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", responseProtocol);\n\n          case 8:\n            protocolParameters = responseProtocol.data;\n            _context2.next = 11;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.getRewardAddress)();\n\n          case 11:\n            rewardAddress = _context2.sent;\n            _context2.next = 14;\n            return (0,_api_util__WEBPACK_IMPORTED_MODULE_5__.getDelegation)(network, rewardAddress);\n\n          case 14:\n            responseDelegation = _context2.sent;\n\n            if (responseDelegation.success) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", responseDelegation);\n\n          case 17:\n            delegationDetails = responseDelegation.data;\n            _context2.next = 20;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.getUtxos)();\n\n          case 20:\n            utxos = _context2.sent;\n            _context2.next = 23;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.getChangeAddress)();\n\n          case 23:\n            changeAddress = _context2.sent;\n            _context2.next = 26;\n            return (0,_api_wallet__WEBPACK_IMPORTED_MODULE_3__.prepareTx)(protocolParameters.keyDeposit, changeAddress);\n\n          case 26:\n            outputs = _context2.sent;\n            _context2.next = 29;\n            return delegationCertificates(delegationDetails.active, delegationDetails.hex);\n\n          case 29:\n            certificates = _context2.sent;\n            _context2.next = 32;\n            return (0,_api_wallet__WEBPACK_IMPORTED_MODULE_3__.buildTx)(changeAddress, utxos, outputs, protocolParameters, certificates);\n\n          case 32:\n            transaction = _context2.sent;\n            _context2.prev = 33;\n            _context2.next = 36;\n            return (0,_namiWallet__WEBPACK_IMPORTED_MODULE_2__.signAndSubmit)(transaction);\n\n          case 36:\n            txHash = _context2.sent;\n            _context2.next = 39;\n            return (0,_api_util__WEBPACK_IMPORTED_MODULE_5__.saveWalletTx)(network, changeAddress, txHash);\n\n          case 39:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 42:\n            _context2.prev = 42;\n            _context2.t0 = _context2[\"catch\"](33);\n            return _context2.abrupt(\"return\", {\n              success: false,\n              data: _context2.t0\n            });\n\n          case 45:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[33, 42]]);\n  }));\n\n  return function handleDelegation() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n});\n\n//# sourceURL=webpack://ronin-universe/./src/lib/delegation.js?");

/***/ }),

/***/ "./src/lib/namiWallet.js":
/*!*******************************!*\
  !*** ./src/lib/namiWallet.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__) {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getNetwork\": function() { return /* binding */ getNetwork; },\n/* harmony export */   \"getChangeAddress\": function() { return /* binding */ getChangeAddress; },\n/* harmony export */   \"getRewardAddress\": function() { return /* binding */ getRewardAddress; },\n/* harmony export */   \"getUtxos\": function() { return /* binding */ getUtxos; },\n/* harmony export */   \"getStakeKeyHash\": function() { return /* binding */ getStakeKeyHash; },\n/* harmony export */   \"signAndSubmit\": function() { return /* binding */ signAndSubmit; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _api_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/config */ \"./src/api/config.js\");\n/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__]);\n_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\n\nvar getNetwork = /*#__PURE__*/function () {\n  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n    var id;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.getNetworkId();\n\n          case 2:\n            id = _context.sent;\n            return _context.abrupt(\"return\", _api_config__WEBPACK_IMPORTED_MODULE_2__.NETWORK[id]);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getNetwork() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getChangeAddress = /*#__PURE__*/function () {\n  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n    var changeAddress;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.getChangeAddress();\n\n          case 2:\n            changeAddress = _context2.sent;\n            return _context2.abrupt(\"return\", _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.Address.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(changeAddress, 'hex')).to_bech32());\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getChangeAddress() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getRewardAddress = /*#__PURE__*/function () {\n  var _ref3 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3() {\n    var rewardAddress;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.getRewardAddress();\n\n          case 2:\n            rewardAddress = _context3.sent;\n            return _context3.abrupt(\"return\", _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.RewardAddress.from_address(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.Address.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(rewardAddress, 'hex'))).to_address().to_bech32());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getRewardAddress() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar getUtxos = /*#__PURE__*/function () {\n  var _ref4 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4() {\n    var rawUtxos;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.getUtxos();\n\n          case 2:\n            rawUtxos = _context4.sent;\n            return _context4.abrupt(\"return\", rawUtxos.map(function (utxo) {\n              return _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.TransactionUnspentOutput.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(utxo, 'hex'));\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getUtxos() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar getStakeKeyHash = /*#__PURE__*/function () {\n  var _ref5 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee5() {\n    var rewardAddress;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.getRewardAddress();\n\n          case 2:\n            rewardAddress = _context5.sent;\n            return _context5.abrupt(\"return\", _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.RewardAddress.from_address(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.Address.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(rewardAddress, 'hex'))).payment_cred().to_keyhash().to_bytes());\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getStakeKeyHash() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar signAndSubmit = /*#__PURE__*/function () {\n  var _ref6 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee6(transaction) {\n    var witnesses, signedTx;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.signTx(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(transaction.to_bytes(), 'hex').toString('hex'));\n\n          case 3:\n            witnesses = _context6.sent;\n            signedTx = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.Transaction[\"new\"](transaction.body(), _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_4__.TransactionWitnessSet.from_bytes(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(witnesses, 'hex')));\n            _context6.next = 7;\n            return _api_config__WEBPACK_IMPORTED_MODULE_2__.cardano.submitTx(buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(signedTx.to_bytes(), 'hex').toString('hex'));\n\n          case 7:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            throw _context6.t0.info;\n\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 10]]);\n  }));\n\n  return function signAndSubmit(_x) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n});\n\n//# sourceURL=webpack://ronin-universe/./src/lib/namiWallet.js?");

/***/ }),

/***/ "./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/regenerator-runtime@0.13.9/node_modules/regenerator-runtime/runtime.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/regenerator-runtime@0.13.9/node_modules/regenerator-runtime/runtime.js ***!
  \***************************************************************************************************/
/***/ (function(module) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/regenerator-runtime@0.13.9/node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _asyncToGenerator; }\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/@babel+runtime@7.16.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js?");

/***/ }),

/***/ "./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __webpack_instantiate__ = function([WEBPACK_IMPORTED_MODULE_0]) {\n\treturn __webpack_require__.v(exports, module.id, \"2916dd9ce28dec4631f9\", {\n\t\t\"./cardano_serialization_lib_bg.js\": {\n\t\t\t\"__wbindgen_object_drop_ref\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,\n\t\t\t\"__wbindgen_string_new\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_new,\n\t\t\t\"__wbg_new_3a746f2619705add\": WEBPACK_IMPORTED_MODULE_0.__wbg_new_3a746f2619705add,\n\t\t\t\"__wbg_call_f54d3a6dadb199ca\": WEBPACK_IMPORTED_MODULE_0.__wbg_call_f54d3a6dadb199ca,\n\t\t\t\"__wbindgen_jsval_eq\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_jsval_eq,\n\t\t\t\"__wbg_self_ac379e780a0d8b94\": WEBPACK_IMPORTED_MODULE_0.__wbg_self_ac379e780a0d8b94,\n\t\t\t\"__wbg_crypto_1e4302b85d4f64a2\": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_1e4302b85d4f64a2,\n\t\t\t\"__wbindgen_is_undefined\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_undefined,\n\t\t\t\"__wbg_getRandomValues_1b4ba144162a5c9e\": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_1b4ba144162a5c9e,\n\t\t\t\"__wbg_require_6461b1e9a0d7c34a\": WEBPACK_IMPORTED_MODULE_0.__wbg_require_6461b1e9a0d7c34a,\n\t\t\t\"__wbg_randomFillSync_1b52c8482374c55b\": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_1b52c8482374c55b,\n\t\t\t\"__wbg_getRandomValues_1ef11e888e5228e9\": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_1ef11e888e5228e9,\n\t\t\t\"__wbindgen_string_get\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_get,\n\t\t\t\"__wbindgen_debug_string\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_debug_string,\n\t\t\t\"__wbindgen_throw\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,\n\t\t\t\"__wbindgen_rethrow\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_rethrow\n\t\t}\n\t});\n}\n__webpack_require__.a(module, function(__webpack_handle_async_dependencies__) {\n\t/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./cardano_serialization_lib_bg.js */ \"./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\n\tvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([WEBPACK_IMPORTED_MODULE_0]);\n\treturn __webpack_async_dependencies__.then ? __webpack_async_dependencies__.then(__webpack_instantiate__) : __webpack_instantiate__(__webpack_async_dependencies__);\n}, 1);\n\n//# sourceURL=webpack://ronin-universe/./node_modules/.pnpm/@emurgo+cardano-serialization-lib-browser@9.1.1/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	!function() {
/******/ 		var webpackThen = typeof Symbol === "function" ? Symbol("webpack then") : "__webpack_then__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var completeQueue = function(queue) {
/******/ 			if(queue) {
/******/ 				queue.forEach(function(fn) { fn.r--; });
/******/ 				queue.forEach(function(fn) { fn.r-- ? fn.r++ : fn(); });
/******/ 			}
/******/ 		}
/******/ 		var completeFunction = function(fn) { !--fn.r && fn(); };
/******/ 		var queueFunction = function(queue, fn) { queue ? queue.push(fn) : completeFunction(fn); };
/******/ 		var wrapDeps = function(deps) { return deps.map(function(dep) {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackThen]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					dep.then(function(r) {
/******/ 						obj[webpackExports] = r;
/******/ 						completeQueue(queue);
/******/ 						queue = 0;
/******/ 					});
/******/ 					var obj = {};
/******/ 												obj[webpackThen] = function(fn, reject) { queueFunction(queue, fn), dep.catch(reject); };
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 								ret[webpackThen] = function(fn) { completeFunction(fn); };
/******/ 								ret[webpackExports] = dep;
/******/ 								return ret;
/******/ 		}); };
/******/ 		__webpack_require__.a = function(module, body, hasAwait) {
/******/ 			var queue = hasAwait && [];
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var isEvaluating = true;
/******/ 			var nested = false;
/******/ 			var whenAll = function(deps, onResolve, onReject) {
/******/ 				if (nested) return;
/******/ 				nested = true;
/******/ 				onResolve.r += deps.length;
/******/ 				deps.map(function(dep, i) { dep[webpackThen](onResolve, onReject); });
/******/ 				nested = false;
/******/ 			};
/******/ 			var promise = new Promise(function(resolve, rej) {
/******/ 				reject = rej;
/******/ 				outerResolve = function() { resolve(exports), completeQueue(queue), queue = 0; };
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackThen] = function(fn, rejectFn) {
/******/ 				if (isEvaluating) { return completeFunction(fn); }
/******/ 				if (currentDeps) whenAll(currentDeps, fn, rejectFn);
/******/ 				queueFunction(queue, fn);
/******/ 				promise.catch(rejectFn);
/******/ 			};
/******/ 			module.exports = promise;
/******/ 			body(function(deps) {
/******/ 				if(!deps) return outerResolve();
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn, result;
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					fn = function() { resolve(result = currentDeps.map(function(d) { return d[webpackExports]; })); };
/******/ 					fn.r = 0;
/******/ 					whenAll(currentDeps, fn, reject);
/******/ 				});
/******/ 				return fn.r ? promise : result;
/******/ 			}).then(outerResolve, reject);
/******/ 			isEvaluating = false;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/wasm loading */
/******/ 	!function() {
/******/ 		__webpack_require__.v = function(exports, wasmModuleId, wasmModuleHash, importsObj) {
/******/ 			var req = fetch(__webpack_require__.p + "" + wasmModuleHash + ".module.wasm");
/******/ 			if (typeof WebAssembly.instantiateStreaming === 'function') {
/******/ 				return WebAssembly.instantiateStreaming(req, importsObj)
/******/ 					.then(function(res) { return Object.assign(exports, res.instance.exports); });
/******/ 			}
/******/ 			return req
/******/ 				.then(function(x) { return x.arrayBuffer(); })
/******/ 				.then(function(bytes) { return WebAssembly.instantiate(bytes, importsObj); })
/******/ 				.then(function(res) { return Object.assign(exports, res.instance.exports); });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/delegation.js");
/******/ 	
/******/ })()
;